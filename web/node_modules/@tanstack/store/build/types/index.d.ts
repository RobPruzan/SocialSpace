/**
 * @tanstack/store/src/index.ts
 *
 * Copyright (c) TanStack
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
type AnyUpdater = (...args: any[]) => any;
type Listener = (opts: {
    priority: Priority;
}) => void;
type Priority = 'high' | 'low';
interface StoreOptions<TState, TUpdater extends AnyUpdater = (cb: TState) => TState> {
    updateFn?: (previous: TState) => (updater: TUpdater) => TState;
    onSubscribe?: (listener: Listener, store: Store<TState, TUpdater>) => () => void;
    onUpdate?: (opts: {
        priority: Priority;
    }) => void;
    defaultPriority?: Priority;
}
declare class Store<TState, TUpdater extends AnyUpdater = (cb: TState) => TState> {
    listeners: Set<Listener>;
    state: TState;
    options?: StoreOptions<TState, TUpdater>;
    _batching: boolean;
    _flushing: number;
    _nextPriority: null | Priority;
    constructor(initialState: TState, options?: StoreOptions<TState, TUpdater>);
    subscribe: (listener: Listener) => () => void;
    setState: (updater: TUpdater, opts?: {
        priority: Priority;
    }) => void;
    _flush: () => void;
    batch: (cb: () => void) => void;
}

export { AnyUpdater, Listener, Priority, Store };
