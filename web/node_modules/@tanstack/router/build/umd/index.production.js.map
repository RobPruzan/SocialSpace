{"version":3,"file":"index.production.js","sources":["../../../../node_modules/.pnpm/tiny-invariant@1.3.1/node_modules/tiny-invariant/dist/esm/tiny-invariant.js","../../src/history.ts","../../src/utils.ts","../../src/path.ts","../../src/qss.ts","../../../store/build/esm/index.js","../../../react-store/build/esm/index.js","../../src/react.tsx","../../src/route.ts","../../src/searchParams.ts","../../src/router.ts","../../../../node_modules/.pnpm/tiny-warning@1.0.3/node_modules/tiny-warning/dist/tiny-warning.esm.js"],"sourcesContent":["var isProduction = process.env.NODE_ENV === 'production';\nvar prefix = 'Invariant failed';\nfunction invariant(condition, message) {\n    if (condition) {\n        return;\n    }\n    if (isProduction) {\n        throw new Error(prefix);\n    }\n    var provided = typeof message === 'function' ? message() : message;\n    var value = provided ? \"\".concat(prefix, \": \").concat(provided) : prefix;\n    throw new Error(value);\n}\n\nexport { invariant as default };\n","// While the public API was clearly inspired by the \"history\" npm package,\n// This implementation attempts to be more lightweight by\n// making assumptions about the way TanStack Router works\n\nexport interface RouterHistory {\n  location: RouterLocation\n  listen: (cb: () => void) => () => void\n  push: (path: string, state?: any) => void\n  replace: (path: string, state?: any) => void\n  go: (index: number) => void\n  back: () => void\n  forward: () => void\n  createHref: (href: string) => string\n  block: (blockerFn: BlockerFn) => () => void\n}\n\nexport interface ParsedPath {\n  href: string\n  pathname: string\n  search: string\n  hash: string\n}\n\nexport interface RouterLocation extends ParsedPath {\n  state: any\n}\n\ntype BlockerFn = (retry: () => void, cancel: () => void) => void\n\nconst popStateEvent = 'popstate'\nconst beforeUnloadEvent = 'beforeunload'\n\nconst beforeUnloadListener = (event: Event) => {\n  event.preventDefault()\n  // @ts-ignore\n  return (event.returnValue = '')\n}\n\nconst stopBlocking = () => {\n  removeEventListener(beforeUnloadEvent, beforeUnloadListener, {\n    capture: true,\n  })\n}\n\nfunction createHistory(opts: {\n  getLocation: () => RouterLocation\n  listener: (onUpdate: () => void) => () => void\n  pushState: (path: string, state: any) => void\n  replaceState: (path: string, state: any) => void\n  go: (n: number) => void\n  back: () => void\n  forward: () => void\n  createHref: (path: string) => string\n}): RouterHistory {\n  let location = opts.getLocation()\n  let unsub = () => {}\n  let listeners = new Set<() => void>()\n  let blockers: BlockerFn[] = []\n  let queue: (() => void)[] = []\n\n  const tryFlush = () => {\n    if (blockers.length) {\n      blockers[0]?.(tryFlush, () => {\n        blockers = []\n        stopBlocking()\n      })\n      return\n    }\n\n    while (queue.length) {\n      queue.shift()?.()\n    }\n\n    onUpdate()\n  }\n\n  const queueTask = (task: () => void) => {\n    queue.push(task)\n    tryFlush()\n  }\n\n  const onUpdate = () => {\n    location = opts.getLocation()\n    listeners.forEach((listener) => listener())\n  }\n\n  return {\n    get location() {\n      return location\n    },\n    listen: (cb: () => void) => {\n      if (listeners.size === 0) {\n        unsub = opts.listener(onUpdate)\n      }\n      listeners.add(cb)\n\n      return () => {\n        listeners.delete(cb)\n        if (listeners.size === 0) {\n          unsub()\n        }\n      }\n    },\n    push: (path: string, state: any) => {\n      queueTask(() => {\n        opts.pushState(path, state)\n      })\n    },\n    replace: (path: string, state: any) => {\n      queueTask(() => {\n        opts.replaceState(path, state)\n      })\n    },\n    go: (index) => {\n      queueTask(() => {\n        opts.go(index)\n      })\n    },\n    back: () => {\n      queueTask(() => {\n        opts.back()\n      })\n    },\n    forward: () => {\n      queueTask(() => {\n        opts.forward()\n      })\n    },\n    createHref: (str) => opts.createHref(str),\n    block: (cb) => {\n      blockers.push(cb)\n\n      if (blockers.length === 1) {\n        addEventListener(beforeUnloadEvent, beforeUnloadListener, {\n          capture: true,\n        })\n      }\n\n      return () => {\n        blockers = blockers.filter((b) => b !== cb)\n\n        if (!blockers.length) {\n          stopBlocking()\n        }\n      }\n    },\n  }\n}\n\nexport function createBrowserHistory(opts?: {\n  getHref?: () => string\n  createHref?: (path: string) => string\n}): RouterHistory {\n  const getHref =\n    opts?.getHref ??\n    (() =>\n      `${window.location.pathname}${window.location.search}${window.location.hash}`)\n  const createHref = opts?.createHref ?? ((path) => path)\n  const getLocation = () => parseLocation(getHref(), history.state)\n\n  return createHistory({\n    getLocation,\n    listener: (onUpdate) => {\n      window.addEventListener(popStateEvent, onUpdate)\n      return () => {\n        window.removeEventListener(popStateEvent, onUpdate)\n      }\n    },\n    pushState: (path, state) => {\n      window.history.pushState(\n        { ...state, key: createRandomKey() },\n        '',\n        createHref(path),\n      )\n    },\n    replaceState: (path, state) => {\n      window.history.replaceState(\n        { ...state, key: createRandomKey() },\n        '',\n        createHref(path),\n      )\n    },\n    back: () => window.history.back(),\n    forward: () => window.history.forward(),\n    go: (n) => window.history.go(n),\n    createHref: (path) => createHref(path),\n  })\n}\n\nexport function createHashHistory(): RouterHistory {\n  return createBrowserHistory({\n    getHref: () => window.location.hash.substring(1),\n    createHref: (path) => `#${path}`,\n  })\n}\n\nexport function createMemoryHistory(\n  opts: {\n    initialEntries: string[]\n    initialIndex?: number\n  } = {\n    initialEntries: ['/'],\n  },\n): RouterHistory {\n  const entries = opts.initialEntries\n  let index = opts.initialIndex ?? entries.length - 1\n  let currentState = {}\n\n  const getLocation = () => parseLocation(entries[index]!, currentState)\n\n  return createHistory({\n    getLocation,\n    listener: () => {\n      return () => {}\n    },\n    pushState: (path, state) => {\n      currentState = {\n        ...state,\n        key: createRandomKey(),\n      }\n      entries.push(path)\n      index++\n    },\n    replaceState: (path, state) => {\n      currentState = {\n        ...state,\n        key: createRandomKey(),\n      }\n      entries[index] = path\n    },\n    back: () => {\n      index--\n    },\n    forward: () => {\n      index = Math.min(index + 1, entries.length - 1)\n    },\n    go: (n) => window.history.go(n),\n    createHref: (path) => path,\n  })\n}\n\nfunction parseLocation(href: string, state: any): RouterLocation {\n  let hashIndex = href.indexOf('#')\n  let searchIndex = href.indexOf('?')\n\n  return {\n    href,\n    pathname: href.substring(\n      0,\n      hashIndex > 0\n        ? searchIndex > 0\n          ? Math.min(hashIndex, searchIndex)\n          : hashIndex\n        : searchIndex > 0\n        ? searchIndex\n        : href.length,\n    ),\n    hash: hashIndex > -1 ? href.substring(hashIndex) : '',\n    search:\n      searchIndex > -1\n        ? href.slice(searchIndex, hashIndex === -1 ? undefined : hashIndex)\n        : '',\n    state,\n  }\n}\n\n// Thanks co-pilot!\nfunction createRandomKey() {\n  return (Math.random() + 1).toString(36).substring(7)\n}\n","export type NoInfer<T> = [T][T extends any ? 0 : never]\nexport type IsAny<T, Y, N> = 1 extends 0 & T ? Y : N\nexport type IsAnyBoolean<T> = 1 extends 0 & T ? true : false\nexport type IsKnown<T, Y, N> = unknown extends T ? N : Y\nexport type PickAsRequired<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type PickAsPartial<T, K extends keyof T> = Omit<T, K> &\n  Partial<Pick<T, K>>\nexport type PickUnsafe<T, K> = K extends keyof T ? Pick<T, K> : never\nexport type PickExtra<T, K> = {\n  [TKey in keyof K as string extends TKey\n    ? never\n    : TKey extends keyof T\n    ? never\n    : TKey]: K[TKey]\n}\n\nexport type PickRequired<T> = {\n  [K in keyof T as undefined extends T[K] ? never : K]: T[K]\n}\n\nexport type Expand<T> = T extends object\n  ? T extends infer O\n    ? { [K in keyof O]: O[K] }\n    : never\n  : T\n\nexport type UnionToIntersection<U> = (\n  U extends any ? (k: U) => void : never\n) extends (k: infer I) => any\n  ? I\n  : never\n\ntype Compute<T> = { [K in keyof T]: T[K] } | never\n\ntype AllKeys<T> = T extends any ? keyof T : never\n\nexport type MergeUnion<T, Keys extends keyof T = keyof T> = Compute<\n  {\n    [K in Keys]: T[Keys]\n  } & {\n    [K in AllKeys<T>]?: T extends any\n      ? K extends keyof T\n        ? T[K]\n        : never\n      : never\n  }\n>\n\nexport type Values<O> = O[ValueKeys<O>]\nexport type ValueKeys<O> = Extract<keyof O, PropertyKey>\n\nexport type DeepAwaited<T> = T extends Promise<infer A>\n  ? DeepAwaited<A>\n  : T extends Record<infer A, Promise<infer B>>\n  ? { [K in A]: DeepAwaited<B> }\n  : T\n\nexport type PathParamMask<TRoutePath extends string> =\n  TRoutePath extends `${infer L}/$${infer C}/${infer R}`\n    ? PathParamMask<`${L}/${string}/${R}`>\n    : TRoutePath extends `${infer L}/$${infer C}`\n    ? PathParamMask<`${L}/${string}`>\n    : TRoutePath\n\nexport type Timeout = ReturnType<typeof setTimeout>\n\nexport type Updater<TPrevious, TResult = TPrevious> =\n  | TResult\n  | ((prev?: TPrevious) => TResult)\n\nexport type PickExtract<T, U> = {\n  [K in keyof T as T[K] extends U ? K : never]: T[K]\n}\n\nexport type PickExclude<T, U> = {\n  [K in keyof T as T[K] extends U ? never : K]: T[K]\n}\n\nexport function last<T>(arr: T[]) {\n  return arr[arr.length - 1]\n}\n\nfunction isFunction(d: any): d is Function {\n  return typeof d === 'function'\n}\n\nexport function functionalUpdate<TResult>(\n  updater: Updater<TResult>,\n  previous: TResult,\n) {\n  if (isFunction(updater)) {\n    return updater(previous as TResult)\n  }\n\n  return updater\n}\n\nexport function pick<T, K extends keyof T>(parent: T, keys: K[]): Pick<T, K> {\n  return keys.reduce((obj: any, key: K) => {\n    obj[key] = parent[key]\n    return obj\n  }, {} as any)\n}\n\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between immutable JSON values for example.\n * Do not use this with signals\n */\nexport function replaceEqualDeep<T>(prev: any, _next: T): T {\n  if (prev === _next) {\n    return prev\n  }\n\n  const next = _next as any\n\n  const array = Array.isArray(prev) && Array.isArray(next)\n\n  if (array || (isPlainObject(prev) && isPlainObject(next))) {\n    const prevSize = array ? prev.length : Object.keys(prev).length\n    const nextItems = array ? next : Object.keys(next)\n    const nextSize = nextItems.length\n    const copy: any = array ? [] : {}\n\n    let equalItems = 0\n\n    for (let i = 0; i < nextSize; i++) {\n      const key = array ? i : nextItems[i]\n      copy[key] = replaceEqualDeep(prev[key], next[key])\n      if (copy[key] === prev[key]) {\n        equalItems++\n      }\n    }\n\n    return prevSize === nextSize && equalItems === prevSize ? prev : copy\n  }\n\n  return next\n}\n\n// Copied from: https://github.com/jonschlinkert/is-plain-object\nexport function isPlainObject(o: any) {\n  if (!hasObjectPrototype(o)) {\n    return false\n  }\n\n  // If has modified constructor\n  const ctor = o.constructor\n  if (typeof ctor === 'undefined') {\n    return true\n  }\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) {\n    return false\n  }\n\n  // If constructor does not have an Object-specific method\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any) {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function partialDeepEqual(a: any, b: any): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (isPlainObject(a) && isPlainObject(b)) {\n    return !Object.keys(b).some((key) => !partialDeepEqual(a[key], b[key]))\n  }\n\n  if (Array.isArray(a) && Array.isArray(b)) {\n    return (\n      a.length === b.length &&\n      a.every((item, index) => partialDeepEqual(item, b[index]))\n    )\n  }\n\n  return false\n}\n","import { AnyPathParams } from './route'\nimport { MatchLocation } from './router'\nimport { last } from './utils'\n\nexport interface Segment {\n  type: 'pathname' | 'param' | 'wildcard'\n  value: string\n}\n\nexport function joinPaths(paths: (string | undefined)[]) {\n  return cleanPath(paths.filter(Boolean).join('/'))\n}\n\nexport function cleanPath(path: string) {\n  // remove double slashes\n  return path.replace(/\\/{2,}/g, '/')\n}\n\nexport function trimPathLeft(path: string) {\n  return path === '/' ? path : path.replace(/^\\/{1,}/, '')\n}\n\nexport function trimPathRight(path: string) {\n  return path === '/' ? path : path.replace(/\\/{1,}$/, '')\n}\n\nexport function trimPath(path: string) {\n  return trimPathRight(trimPathLeft(path))\n}\n\nexport function resolvePath(basepath: string, base: string, to: string) {\n  base = base.replace(new RegExp(`^${basepath}`), '/')\n  to = to.replace(new RegExp(`^${basepath}`), '/')\n\n  let baseSegments = parsePathname(base)\n  const toSegments = parsePathname(to)\n\n  toSegments.forEach((toSegment, index) => {\n    if (toSegment.value === '/') {\n      if (!index) {\n        // Leading slash\n        baseSegments = [toSegment]\n      } else if (index === toSegments.length - 1) {\n        // Trailing Slash\n        baseSegments.push(toSegment)\n      } else {\n        // ignore inter-slashes\n      }\n    } else if (toSegment.value === '..') {\n      // Extra trailing slash? pop it off\n      if (baseSegments.length > 1 && last(baseSegments)?.value === '/') {\n        baseSegments.pop()\n      }\n      baseSegments.pop()\n    } else if (toSegment.value === '.') {\n      return\n    } else {\n      baseSegments.push(toSegment)\n    }\n  })\n\n  const joined = joinPaths([basepath, ...baseSegments.map((d) => d.value)])\n\n  return cleanPath(joined)\n}\n\nexport function parsePathname(pathname?: string): Segment[] {\n  if (!pathname) {\n    return []\n  }\n\n  pathname = cleanPath(pathname)\n\n  const segments: Segment[] = []\n\n  if (pathname.slice(0, 1) === '/') {\n    pathname = pathname.substring(1)\n    segments.push({\n      type: 'pathname',\n      value: '/',\n    })\n  }\n\n  if (!pathname) {\n    return segments\n  }\n\n  // Remove empty segments and '.' segments\n  const split = pathname.split('/').filter(Boolean)\n\n  segments.push(\n    ...split.map((part): Segment => {\n      if (part === '$' || part === '*') {\n        return {\n          type: 'wildcard',\n          value: part,\n        }\n      }\n\n      if (part.charAt(0) === '$') {\n        return {\n          type: 'param',\n          value: part,\n        }\n      }\n\n      return {\n        type: 'pathname',\n        value: part,\n      }\n    }),\n  )\n\n  if (pathname.slice(-1) === '/') {\n    pathname = pathname.substring(1)\n    segments.push({\n      type: 'pathname',\n      value: '/',\n    })\n  }\n\n  return segments\n}\n\nexport function interpolatePath(\n  path: string | undefined,\n  params: any,\n  leaveWildcards: boolean = false,\n) {\n  const interpolatedPathSegments = parsePathname(path)\n\n  return joinPaths(\n    interpolatedPathSegments.map((segment) => {\n      if (segment.type === 'wildcard') {\n        const value = params[segment.value]\n        if (leaveWildcards) return `${segment.value}${value ?? ''}`\n        return value\n      }\n\n      if (segment.type === 'param') {\n        return params![segment.value.substring(1)] ?? ''\n      }\n\n      return segment.value\n    }),\n  )\n}\n\nexport function matchPathname(\n  basepath: string,\n  currentPathname: string,\n  matchLocation: Pick<MatchLocation, 'to' | 'fuzzy' | 'caseSensitive'>,\n): AnyPathParams | undefined {\n  const pathParams = matchByPath(basepath, currentPathname, matchLocation)\n  // const searchMatched = matchBySearch(location.search, matchLocation)\n\n  if (matchLocation.to && !pathParams) {\n    return\n  }\n\n  return pathParams ?? {}\n}\n\nexport function matchByPath(\n  basepath: string,\n  from: string,\n  matchLocation: Pick<MatchLocation, 'to' | 'caseSensitive' | 'fuzzy'>,\n): Record<string, string> | undefined {\n  // Remove the base path from the pathname\n  from = basepath != '/' ? from.substring(basepath.length) : from\n  // Default to to $ (wildcard)\n  const to = `${matchLocation.to ?? '$'}`\n  // Parse the from and to\n  const baseSegments = parsePathname(from)\n  const routeSegments = parsePathname(to)\n\n  if (!from.startsWith('/')) {\n    baseSegments.unshift({\n      type: 'pathname',\n      value: '/',\n    })\n  }\n\n  if (!to.startsWith('/')) {\n    routeSegments.unshift({\n      type: 'pathname',\n      value: '/',\n    })\n  }\n\n  const params: Record<string, string> = {}\n\n  let isMatch = (() => {\n    for (\n      let i = 0;\n      i < Math.max(baseSegments.length, routeSegments.length);\n      i++\n    ) {\n      const baseSegment = baseSegments[i]\n      const routeSegment = routeSegments[i]\n\n      const isLastBaseSegment = i >= baseSegments.length - 1\n      const isLastRouteSegment = i >= routeSegments.length - 1\n\n      if (routeSegment) {\n        if (routeSegment.type === 'wildcard') {\n          if (baseSegment?.value) {\n            params['*'] = joinPaths(baseSegments.slice(i).map((d) => d.value))\n            return true\n          }\n          return false\n        }\n\n        if (routeSegment.type === 'pathname') {\n          if (routeSegment.value === '/' && !baseSegment?.value) {\n            return true\n          }\n\n          if (baseSegment) {\n            if (matchLocation.caseSensitive) {\n              if (routeSegment.value !== baseSegment.value) {\n                return false\n              }\n            } else if (\n              routeSegment.value.toLowerCase() !==\n              baseSegment.value.toLowerCase()\n            ) {\n              return false\n            }\n          }\n        }\n\n        if (!baseSegment) {\n          return false\n        }\n\n        if (routeSegment.type === 'param') {\n          if (baseSegment?.value === '/') {\n            return false\n          }\n          if (baseSegment.value.charAt(0) !== '$') {\n            params[routeSegment.value.substring(1)] = baseSegment.value\n          }\n        }\n      }\n\n      if (!isLastBaseSegment && isLastRouteSegment) {\n        return !!matchLocation.fuzzy\n      }\n    }\n\n    return true\n  })()\n\n  return isMatch ? (params as Record<string, string>) : undefined\n}\n","// @ts-nocheck\n\n// qss has been slightly modified and inlined here for our use cases (and compression's sake). We've included it as a hard dependency for MIT license attribution.\n\nexport function encode(obj, pfx?: string) {\n  var k,\n    i,\n    tmp,\n    str = ''\n\n  for (k in obj) {\n    if ((tmp = obj[k]) !== void 0) {\n      if (Array.isArray(tmp)) {\n        for (i = 0; i < tmp.length; i++) {\n          str && (str += '&')\n          str += encodeURIComponent(k) + '=' + encodeURIComponent(tmp[i])\n        }\n      } else {\n        str && (str += '&')\n        str += encodeURIComponent(k) + '=' + encodeURIComponent(tmp)\n      }\n    }\n  }\n\n  return (pfx || '') + str\n}\n\nfunction toValue(mix) {\n  if (!mix) return ''\n  var str = decodeURIComponent(mix)\n  if (str === 'false') return false\n  if (str === 'true') return true\n  if (str.charAt(0) === '0') return str\n  return +str * 0 === 0 ? +str : str\n}\n\nexport function decode(str) {\n  var tmp,\n    k,\n    out = {},\n    arr = str.split('&')\n\n  while ((tmp = arr.shift())) {\n    tmp = tmp.split('=')\n    k = tmp.shift()\n    if (out[k] !== void 0) {\n      out[k] = [].concat(out[k], toValue(tmp.shift()))\n    } else {\n      out[k] = toValue(tmp.shift())\n    }\n  }\n\n  return out\n}\n","/**\n * @tanstack/store/src/index.ts\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nclass Store {\n  listeners = new Set();\n  _batching = false;\n  _flushing = 0;\n  _nextPriority = null;\n  constructor(initialState, options) {\n    this.state = initialState;\n    this.options = options;\n  }\n  subscribe = listener => {\n    this.listeners.add(listener);\n    const unsub = this.options?.onSubscribe?.(listener, this);\n    return () => {\n      this.listeners.delete(listener);\n      unsub?.();\n    };\n  };\n  setState = (updater, opts) => {\n    const previous = this.state;\n    this.state = this.options?.updateFn ? this.options.updateFn(previous)(updater) : updater(previous);\n    const priority = opts?.priority ?? this.options?.defaultPriority ?? 'high';\n    if (this._nextPriority === null) {\n      this._nextPriority = priority;\n    } else if (this._nextPriority === 'high') {\n      this._nextPriority = priority;\n    } else {\n      this._nextPriority = this.options?.defaultPriority ?? 'high';\n    }\n\n    // Always run onUpdate, regardless of batching\n    this.options?.onUpdate?.({\n      priority: this._nextPriority\n    });\n\n    // Attempt to flush\n    this._flush();\n  };\n  _flush = () => {\n    if (this._batching) return;\n    const flushId = ++this._flushing;\n    this.listeners.forEach(listener => {\n      if (this._flushing !== flushId) return;\n      listener({\n        priority: this._nextPriority ?? 'high'\n      });\n    });\n  };\n  batch = cb => {\n    if (this._batching) return cb();\n    this._batching = true;\n    cb();\n    this._batching = false;\n    this._flush();\n  };\n}\n\nexport { Store };\n//# sourceMappingURL=index.js.map\n","/**\n * @tanstack/react-store/src/index.tsx\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport { useSyncExternalStoreWithSelector } from 'use-sync-external-store/shim/with-selector';\nexport * from '@tanstack/store';\n\nfunction useStore(store, selector = d => d) {\n  const slice = useSyncExternalStoreWithSelector(store.subscribe, () => store.state, () => store.state, selector, shallow);\n  return slice;\n}\nfunction shallow(objA, objB) {\n  if (Object.is(objA, objB)) {\n    return true;\n  }\n  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {\n    return false;\n  }\n  const keysA = Object.keys(objA);\n  if (keysA.length !== Object.keys(objB).length) {\n    return false;\n  }\n  for (let i = 0; i < keysA.length; i++) {\n    if (!Object.prototype.hasOwnProperty.call(objB, keysA[i]) || !Object.is(objA[keysA[i]], objB[keysA[i]])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport { shallow, useStore };\n//# sourceMappingURL=index.js.map\n","import * as React from 'react'\nimport { NoInfer, useStore } from '@tanstack/react-store'\nimport invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\n// @ts-ignore\nimport {\n  LinkOptions,\n  ToOptions,\n  ResolveRelativePath,\n  NavigateOptions,\n} from './link'\nimport { AnyRoute } from './route'\nimport { RouteByPath, AnyRoutesInfo, DefaultRoutesInfo } from './routeInfo'\nimport {\n  RegisteredRoutesInfo,\n  MatchRouteOptions,\n  RegisteredRouter,\n  RouterOptions,\n  Router,\n  RouteMatch,\n} from './router'\nimport { functionalUpdate, last, pick } from './utils'\n\n//\n\nexport { useStore }\n\n//\n\ntype ReactNode = any\n\nexport type SyncRouteComponent<TProps = {}> = (props: TProps) => ReactNode\n\nexport type RouteComponent<TProps = {}> = SyncRouteComponent<TProps> & {\n  preload?: () => Promise<void>\n}\n\nexport function lazy<T extends Record<string, SyncRouteComponent>>(\n  importer: () => Promise<T>,\n  exportName: keyof T = 'default',\n): RouteComponent {\n  const lazyComp = React.lazy(async () => {\n    const moduleExports = await importer()\n    const component = moduleExports[exportName]\n    return { default: component }\n  })\n\n  let preloaded: Promise<SyncRouteComponent>\n\n  const finalComp = lazyComp as unknown as RouteComponent\n\n  finalComp.preload = async () => {\n    if (!preloaded) {\n      await importer()\n    }\n  }\n\n  return finalComp\n}\n\nexport type LinkPropsOptions<\n  TFrom extends RegisteredRoutesInfo['routePaths'] = '/',\n  TTo extends string = '',\n> = LinkOptions<RegisteredRoutesInfo, TFrom, TTo> & {\n  // A function that returns additional props for the `active` state of this link. These props override other props passed to the link (`style`'s are merged, `className`'s are concatenated)\n  activeProps?:\n    | React.AnchorHTMLAttributes<HTMLAnchorElement>\n    | (() => React.AnchorHTMLAttributes<HTMLAnchorElement>)\n  // A function that returns additional props for the `inactive` state of this link. These props override other props passed to the link (`style`'s are merged, `className`'s are concatenated)\n  inactiveProps?:\n    | React.AnchorHTMLAttributes<HTMLAnchorElement>\n    | (() => React.AnchorHTMLAttributes<HTMLAnchorElement>)\n  // If set to `true`, the link's underlying navigate() call will be wrapped in a `React.startTransition` call. Defaults to `true`.\n  startTransition?: boolean\n}\n\nexport type MakeUseMatchRouteOptions<\n  TFrom extends RegisteredRoutesInfo['routePaths'] = '/',\n  TTo extends string = '',\n> = ToOptions<RegisteredRoutesInfo, TFrom, TTo> & MatchRouteOptions\n\nexport type MakeMatchRouteOptions<\n  TFrom extends RegisteredRoutesInfo['routePaths'] = '/',\n  TTo extends string = '',\n> = ToOptions<RegisteredRoutesInfo, TFrom, TTo> &\n  MatchRouteOptions & {\n    // If a function is passed as a child, it will be given the `isActive` boolean to aid in further styling on the element it returns\n    children?:\n      | ((\n          params?: RouteByPath<\n            RegisteredRoutesInfo,\n            ResolveRelativePath<TFrom, NoInfer<TTo>>\n          >['__types']['allParams'],\n        ) => ReactNode)\n      | React.ReactNode\n  }\n\nexport type MakeLinkPropsOptions<\n  TFrom extends string = '/',\n  TTo extends string = '',\n> = LinkPropsOptions<TFrom, TTo> & React.AnchorHTMLAttributes<HTMLAnchorElement>\n\nexport type MakeLinkOptions<\n  TFrom extends RegisteredRoutesInfo['routePaths'] = '/',\n  TTo extends string = '',\n> = LinkPropsOptions<TFrom, TTo> &\n  Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, 'children'> & {\n    // If a function is passed as a child, it will be given the `isActive` boolean to aid in further styling on the element it returns\n    children?:\n      | React.ReactNode\n      | ((state: { isActive: boolean }) => React.ReactNode)\n  }\n\nexport type PromptProps = {\n  message: string\n  condition?: boolean | any\n  children?: ReactNode\n}\n\n//\n\nexport function useLinkProps<\n  TFrom extends string = '/',\n  TTo extends string = '',\n>(\n  options: MakeLinkPropsOptions<TFrom, TTo>,\n): React.AnchorHTMLAttributes<HTMLAnchorElement> {\n  const router = useRouter()\n\n  const {\n    // custom props\n    type,\n    children,\n    target,\n    activeProps = () => ({ className: 'active' }),\n    inactiveProps = () => ({}),\n    activeOptions,\n    disabled,\n    // fromCurrent,\n    hash,\n    search,\n    params,\n    to = '.',\n    preload,\n    preloadDelay,\n    replace,\n    // element props\n    style,\n    className,\n    onClick,\n    onFocus,\n    onMouseEnter,\n    onMouseLeave,\n    onTouchStart,\n    ...rest\n  } = options\n\n  const linkInfo = router.buildLink(options as any)\n\n  if (linkInfo.type === 'external') {\n    const { href } = linkInfo\n    return { href }\n  }\n\n  const {\n    handleClick,\n    handleFocus,\n    handleEnter,\n    handleLeave,\n    handleTouchStart,\n    isActive,\n    next,\n  } = linkInfo\n\n  const handleReactClick = (e: Event) => {\n    if (options.startTransition ?? true) {\n      ;(React.startTransition || ((d) => d))(() => {\n        handleClick(e)\n      })\n    }\n  }\n\n  const composeHandlers =\n    (handlers: (undefined | ((e: any) => void))[]) =>\n    (e: React.SyntheticEvent) => {\n      if (e.persist) e.persist()\n      handlers.filter(Boolean).forEach((handler) => {\n        if (e.defaultPrevented) return\n        handler!(e)\n      })\n    }\n\n  // Get the active props\n  const resolvedActiveProps: React.HTMLAttributes<HTMLAnchorElement> = isActive\n    ? functionalUpdate(activeProps as any, {}) ?? {}\n    : {}\n\n  // Get the inactive props\n  const resolvedInactiveProps: React.HTMLAttributes<HTMLAnchorElement> =\n    isActive ? {} : functionalUpdate(inactiveProps, {}) ?? {}\n\n  return {\n    ...resolvedActiveProps,\n    ...resolvedInactiveProps,\n    ...rest,\n    href: disabled ? undefined : next.href,\n    onClick: composeHandlers([onClick, handleReactClick]),\n    onFocus: composeHandlers([onFocus, handleFocus]),\n    onMouseEnter: composeHandlers([onMouseEnter, handleEnter]),\n    onMouseLeave: composeHandlers([onMouseLeave, handleLeave]),\n    onTouchStart: composeHandlers([onTouchStart, handleTouchStart]),\n    target,\n    style: {\n      ...style,\n      ...resolvedActiveProps.style,\n      ...resolvedInactiveProps.style,\n    },\n    className:\n      [\n        className,\n        resolvedActiveProps.className,\n        resolvedInactiveProps.className,\n      ]\n        .filter(Boolean)\n        .join(' ') || undefined,\n    ...(disabled\n      ? {\n          role: 'link',\n          'aria-disabled': true,\n        }\n      : undefined),\n    ['data-status']: isActive ? 'active' : undefined,\n  }\n}\n\nexport interface LinkFn<\n  TDefaultFrom extends RegisteredRoutesInfo['routePaths'] = '/',\n  TDefaultTo extends string = '',\n> {\n  <\n    TFrom extends RegisteredRoutesInfo['routePaths'] = TDefaultFrom,\n    TTo extends string = TDefaultTo,\n  >(\n    props: MakeLinkOptions<TFrom, TTo> & React.RefAttributes<HTMLAnchorElement>,\n  ): ReactNode\n}\n\nexport const Link: LinkFn = React.forwardRef((props: any, ref) => {\n  const linkProps = useLinkProps(props)\n\n  return (\n    <a\n      {...{\n        ref: ref as any,\n        ...linkProps,\n        children:\n          typeof props.children === 'function'\n            ? props.children({\n                isActive: (linkProps as any)['data-status'] === 'active',\n              })\n            : props.children,\n      }}\n    />\n  )\n}) as any\n\nexport function Navigate<\n  TFrom extends RegisteredRoutesInfo['routePaths'] = '/',\n  TTo extends string = '',\n>(props: NavigateOptions<RegisteredRoutesInfo, TFrom, TTo>): null {\n  const router = useRouter()\n\n  React.useLayoutEffect(() => {\n    router.navigate(props as any)\n  }, [])\n\n  return null\n}\n\nexport const matchIdsContext = React.createContext<string[]>(null!)\nexport const routerContext = React.createContext<RegisteredRouter>(null!)\n\nexport type RouterProps<\n  TRouteConfig extends AnyRoute = AnyRoute,\n  TRoutesInfo extends AnyRoutesInfo = DefaultRoutesInfo,\n  TDehydrated extends Record<string, any> = Record<string, any>,\n> = Omit<RouterOptions<TRouteConfig, TDehydrated>, 'context'> & {\n  router: Router<TRouteConfig, TRoutesInfo>\n  context?: Partial<RouterOptions<TRouteConfig, TDehydrated>['context']>\n}\n\nexport function useRouterState<TSelected = RegisteredRouter['state']>(opts?: {\n  select: (state: RegisteredRouter['state']) => TSelected\n}): TSelected {\n  const router = useRouter()\n  return useStore(router.__store, opts?.select)\n}\n\nexport function RouterProvider<\n  TRouteConfig extends AnyRoute = AnyRoute,\n  TRoutesInfo extends AnyRoutesInfo = DefaultRoutesInfo,\n  TDehydrated extends Record<string, any> = Record<string, any>,\n>({ router, ...rest }: RouterProps<TRouteConfig, TRoutesInfo, TDehydrated>) {\n  router.update(rest)\n\n  React.useEffect(router.mount, [router])\n\n  const Wrap = router.options.Wrap || React.Fragment\n\n  return (\n    <Wrap>\n      <routerContext.Provider value={router as any}>\n        <Matches />\n      </routerContext.Provider>\n    </Wrap>\n  )\n}\n\nfunction Matches() {\n  const matchIds = useRouterState({\n    select: (d) => d.matches.map((d) => d.id),\n  })\n\n  return (\n    <matchIdsContext.Provider value={[undefined!, ...matchIds]}>\n      <CatchBoundary\n        errorComponent={ErrorComponent}\n        onCatch={() => {\n          warning(\n            false,\n            `Error in router! Consider setting an 'errorComponent' in your RootRoute! 👍`,\n          )\n        }}\n      >\n        <Outlet />\n      </CatchBoundary>\n    </matchIdsContext.Provider>\n  )\n}\n\nexport function useRouter(): RegisteredRouter {\n  const value = React.useContext(routerContext)\n  warning(value, 'useRouter must be used inside a <Router> component!')\n  return value\n}\n\nexport function useMatches<T = RouteMatch[]>(opts?: {\n  select?: (matches: RouteMatch[]) => T\n}): T {\n  const matchIds = React.useContext(matchIdsContext)\n  return useRouterState({\n    select: (state) => {\n      const matches = state.matches.slice(\n        state.matches.findIndex((d) => d.id === matchIds[0]),\n      )\n      return (opts?.select?.(matches) ?? matches) as T\n    },\n  })\n}\n\nexport function useMatch<\n  TFrom extends keyof RegisteredRoutesInfo['routesById'],\n  TStrict extends boolean = true,\n  TRouteMatchState = RouteMatch<\n    RegisteredRoutesInfo,\n    RegisteredRoutesInfo['routesById'][TFrom]\n  >,\n  TSelected = TRouteMatchState,\n>(opts?: {\n  from: TFrom\n  strict?: TStrict\n  select?: (match: TRouteMatchState) => TSelected\n}): TStrict extends true ? TRouteMatchState : TRouteMatchState | undefined {\n  const router = useRouter()\n  const nearestMatchId = React.useContext(matchIdsContext)[0]!\n  const nearestMatchRouteId = router.getRouteMatch(nearestMatchId)?.routeId\n\n  const matchRouteId = useRouterState({\n    select: (state) => {\n      const matches = state.matches\n      const match = opts?.from\n        ? matches.find((d) => d.routeId === opts?.from)\n        : matches.find((d) => d.id === nearestMatchId)\n\n      return match!.routeId\n    },\n  })\n\n  if (opts?.strict ?? true) {\n    invariant(\n      nearestMatchRouteId == matchRouteId,\n      `useMatch(\"${\n        matchRouteId as string\n      }\") is being called in a component that is meant to render the '${nearestMatchRouteId}' route. Did you mean to 'useMatch(\"${\n        matchRouteId as string\n      }\", { strict: false })' or 'useRoute(\"${\n        matchRouteId as string\n      }\")' instead?`,\n    )\n  }\n\n  const match = useRouterState({\n    select: (state) => {\n      const matches = state.matches\n      const match = opts?.from\n        ? matches.find((d) => d.routeId === opts?.from)\n        : matches.find((d) => d.id === nearestMatchId)\n\n      invariant(\n        match,\n        `Could not find ${\n          opts?.from\n            ? `an active match from \"${opts.from}\"`\n            : 'a nearest match!'\n        }`,\n      )\n\n      return (opts?.select?.(match as any) ?? match) as TSelected\n    },\n  })\n\n  return match as any\n}\n\nexport type RouteFromIdOrRoute<T> = T extends RegisteredRoutesInfo['routeUnion']\n  ? T\n  : T extends keyof RegisteredRoutesInfo['routesById']\n  ? RegisteredRoutesInfo['routesById'][T]\n  : T extends string\n  ? keyof RegisteredRoutesInfo['routesById']\n  : never\n\nexport function useLoader<\n  TFrom extends keyof RegisteredRoutesInfo['routesById'],\n  TStrict extends boolean = true,\n  TLoader = RegisteredRoutesInfo['routesById'][TFrom]['__types']['loader'],\n  TSelected = TLoader,\n>(opts?: {\n  from: TFrom\n  strict?: TStrict\n  select?: (search: TLoader) => TSelected\n}): TStrict extends true ? TSelected : TSelected | undefined {\n  return useMatch({\n    ...(opts as any),\n    select: (match: RouteMatch) =>\n      (opts?.select?.(match.loader as TLoader) ?? match.loader) as TSelected,\n  })\n}\n\nexport function useSearch<\n  TFrom extends keyof RegisteredRoutesInfo['routesById'],\n  TStrict extends boolean = true,\n  TSearch = RegisteredRoutesInfo['routesById'][TFrom]['__types']['fullSearchSchema'],\n  TSelected = TSearch,\n>(opts?: {\n  from: TFrom\n  strict?: TStrict\n  select?: (search: TSearch) => TSelected\n}): TStrict extends true ? TSelected : TSelected | undefined {\n  return useMatch({\n    ...(opts as any),\n    select: (match: RouteMatch) => {\n      return (opts?.select?.(match.search as TSearch) ??\n        match.search) as TSelected\n    },\n  })\n}\n\nexport function useParams<\n  TFrom extends keyof RegisteredRoutesInfo['routesById'] = '/',\n  TDefaultSelected = RegisteredRoutesInfo['allParams'] &\n    RegisteredRoutesInfo['routesById'][TFrom]['__types']['allParams'],\n  TSelected = TDefaultSelected,\n>(opts?: {\n  from: TFrom\n  select?: (search: TDefaultSelected) => TSelected\n}): TSelected {\n  return useRouterState({\n    select: (state: any) => {\n      const params = (last(state.matches) as any)?.params\n      return (opts?.select?.(params) ?? params) as TSelected\n    },\n  })\n}\n\nexport function useNavigate<\n  TDefaultFrom extends RegisteredRoutesInfo['routePaths'] = '/',\n>(defaultOpts?: { from?: TDefaultFrom }) {\n  const router = useRouter()\n  return React.useCallback(\n    <\n      TFrom extends RegisteredRoutesInfo['routePaths'] = TDefaultFrom,\n      TTo extends string = '',\n    >(\n      opts?: NavigateOptions<RegisteredRoutesInfo, TFrom, TTo>,\n    ) => {\n      return router.navigate({ ...defaultOpts, ...(opts as any) })\n    },\n    [],\n  )\n}\n\nexport function useMatchRoute() {\n  const router = useRouter()\n\n  return React.useCallback(\n    <TFrom extends string = '/', TTo extends string = ''>(\n      opts: MakeUseMatchRouteOptions<TFrom, TTo>,\n    ) => {\n      const { pending, caseSensitive, ...rest } = opts\n\n      return router.matchRoute(rest as any, {\n        pending,\n        caseSensitive,\n      })\n    },\n    [],\n  )\n}\n\nexport function MatchRoute<TFrom extends string = '/', TTo extends string = ''>(\n  props: MakeMatchRouteOptions<TFrom, TTo>,\n): any {\n  const matchRoute = useMatchRoute()\n  const params = matchRoute(props)\n\n  if (typeof props.children === 'function') {\n    return (props.children as any)(params)\n  }\n\n  return !!params ? props.children : null\n}\n\nexport function Outlet() {\n  const matchIds = React.useContext(matchIdsContext).slice(1)\n\n  if (!matchIds[0]) {\n    return null\n  }\n\n  return <Match matchIds={matchIds} />\n}\n\nconst defaultPending = () => null\n\nfunction Match({ matchIds }: { matchIds: string[] }) {\n  const router = useRouter()\n  const matchId = matchIds[0]!\n  const routeId = router.getRouteMatch(matchId)!.routeId\n  const route = router.getRoute(routeId)\n\n  const PendingComponent = (route.options.pendingComponent ??\n    router.options.defaultPendingComponent ??\n    defaultPending) as any\n\n  const errorComponent =\n    route.options.errorComponent ?? router.options.defaultErrorComponent\n\n  const ResolvedSuspenseBoundary =\n    route.options.wrapInSuspense ?? !route.isRoot\n      ? React.Suspense\n      : SafeFragment\n\n  const ResolvedCatchBoundary = errorComponent ? CatchBoundary : SafeFragment\n\n  return (\n    <matchIdsContext.Provider value={matchIds}>\n      <ResolvedSuspenseBoundary fallback={<PendingComponent />}>\n        <ResolvedCatchBoundary\n          key={route.id}\n          errorComponent={errorComponent}\n          onCatch={() => {\n            warning(false, `Error in route match: ${matchId}`)\n          }}\n        >\n          <MatchInner matchId={matchId} />\n        </ResolvedCatchBoundary>\n      </ResolvedSuspenseBoundary>\n    </matchIdsContext.Provider>\n  )\n}\n\nfunction MatchInner({ matchId }: { matchId: string }): any {\n  const router = useRouter()\n\n  const match = useRouterState({\n    select: (d) =>\n      pick(d.matches.find((d) => d.id === matchId)!, [\n        'status',\n        'loadPromise',\n        'routeId',\n        'error',\n      ]),\n  })\n\n  const route = router.getRoute(match.routeId)\n\n  if (match.status === 'error') {\n    throw match.error\n  }\n\n  if (match.status === 'pending') {\n    invariant(false, 'This should never happen')\n  }\n\n  if (match.status === 'success') {\n    let comp = route.options.component ?? router.options.defaultComponent\n\n    if (comp) {\n      return React.createElement(comp, {\n        useLoader: route.useLoader,\n        useMatch: route.useMatch,\n        useContext: route.useContext,\n        useSearch: route.useSearch,\n        useParams: route.useParams,\n      })\n    }\n\n    return <Outlet />\n  }\n\n  invariant(\n    false,\n    'Idle routeMatch status encountered during rendering! You should never see this. File an issue!',\n  )\n}\n\nfunction SafeFragment(props: any) {\n  return <>{props.children}</>\n}\n\nexport function useInjectHtml() {\n  const router = useRouter()\n\n  return React.useCallback(\n    (html: string | (() => Promise<string> | string)) => {\n      router.injectHtml(html)\n    },\n    [],\n  )\n}\n\nexport function useDehydrate() {\n  const router = useRouter()\n\n  return React.useCallback(function dehydrate<T>(\n    key: any,\n    data: T | (() => Promise<T> | T),\n  ) {\n    return router.dehydrateData(key, data)\n  },\n  [])\n}\n\nexport function useHydrate() {\n  const router = useRouter()\n\n  return function hydrate<T = unknown>(key: any) {\n    return router.hydrateData(key) as T\n  }\n}\n\n// This is the messiest thing ever... I'm either seriously tired (likely) or\n// there has to be a better way to reset error boundaries when the\n// router's location key changes.\n\nclass CatchBoundary extends React.Component<{\n  children: any\n  errorComponent: any\n  onCatch: (error: any, info: any) => void\n}> {\n  state = {\n    error: false,\n    info: undefined,\n  }\n  componentDidCatch(error: any, info: any) {\n    this.props.onCatch(error, info)\n    this.setState({\n      error,\n      info,\n    })\n  }\n  render() {\n    return (\n      <CatchBoundaryInner\n        {...this.props}\n        errorState={this.state}\n        reset={() => this.setState({})}\n      />\n    )\n  }\n}\n\nfunction CatchBoundaryInner(props: {\n  children: any\n  errorComponent: any\n  errorState: { error: unknown; info: any }\n  reset: () => void\n}) {\n  const locationKey = useRouterState({\n    select: (d) => d.resolvedLocation.key,\n  })\n\n  const [activeErrorState, setActiveErrorState] = React.useState(\n    props.errorState,\n  )\n  const errorComponent = props.errorComponent ?? ErrorComponent\n  const prevKeyRef = React.useRef('' as any)\n\n  React.useEffect(() => {\n    if (activeErrorState) {\n      if (locationKey !== prevKeyRef.current) {\n        setActiveErrorState({} as any)\n      }\n    }\n\n    prevKeyRef.current = locationKey\n  }, [activeErrorState, locationKey])\n\n  React.useEffect(() => {\n    if (props.errorState.error) {\n      setActiveErrorState(props.errorState)\n    }\n    // props.reset()\n  }, [props.errorState.error])\n\n  if (props.errorState.error && activeErrorState.error) {\n    return React.createElement(errorComponent, activeErrorState)\n  }\n\n  return props.children\n}\n\nexport function ErrorComponent({ error }: { error: any }) {\n  return (\n    <div style={{ padding: '.5rem', maxWidth: '100%' }}>\n      <strong style={{ fontSize: '1.2rem' }}>Something went wrong!</strong>\n      <div style={{ height: '.5rem' }} />\n      <div>\n        <pre\n          style={{\n            fontSize: '.7em',\n            border: '1px solid red',\n            borderRadius: '.25rem',\n            padding: '.5rem',\n            color: 'red',\n            overflow: 'auto',\n          }}\n        >\n          {error.message ? <code>{error.message}</code> : null}\n        </pre>\n      </div>\n    </div>\n  )\n}\n\nexport function useBlocker(\n  message: string,\n  condition: boolean | any = true,\n): void {\n  const router = useRouter()\n\n  React.useEffect(() => {\n    if (!condition) return\n\n    let unblock = router.history.block((retry, cancel) => {\n      if (window.confirm(message)) {\n        unblock()\n        retry()\n      }\n    })\n\n    return unblock\n  })\n}\n\nexport function Block({ message, condition, children }: PromptProps) {\n  useBlocker(message, condition)\n  return (children ?? null) as ReactNode\n}\n\nexport function shallow<T>(objA: T, objB: T) {\n  if (Object.is(objA, objB)) {\n    return true\n  }\n\n  if (\n    typeof objA !== 'object' ||\n    objA === null ||\n    typeof objB !== 'object' ||\n    objB === null\n  ) {\n    return false\n  }\n\n  const keysA = Object.keys(objA)\n  if (keysA.length !== Object.keys(objB).length) {\n    return false\n  }\n\n  for (let i = 0; i < keysA.length; i++) {\n    if (\n      !Object.prototype.hasOwnProperty.call(objB, keysA[i] as string) ||\n      !Object.is(objA[keysA[i] as keyof T], objB[keysA[i] as keyof T])\n    ) {\n      return false\n    }\n  }\n  return true\n}\n","import { ParsePathParams } from './link'\nimport {\n  AnyRouter,\n  Router,\n  AnyRouteMatch,\n  RouteMatch,\n  RouterConstructorOptions,\n} from './router'\nimport {\n  IsAny,\n  NoInfer,\n  PickRequired,\n  PickUnsafe,\n  UnionToIntersection,\n} from './utils'\nimport invariant from 'tiny-invariant'\nimport { joinPaths, trimPath } from './path'\nimport { AnyRoutesInfo, DefaultRoutesInfo, RoutesInfo } from './routeInfo'\nimport {\n  RouteComponent,\n  useLoader,\n  useMatch,\n  useParams,\n  useSearch,\n} from './react'\n\nexport const rootRouteId = '__root__' as const\nexport type RootRouteId = typeof rootRouteId\nexport type AnyPathParams = {}\nexport type AnySearchSchema = {}\nexport type AnyContext = {}\nexport interface RouteMeta {}\nexport interface RouteContext {}\n\nexport type RouteOptionsBase<TCustomId, TPath> =\n  | {\n      path: TPath\n    }\n  | {\n      id: TCustomId\n    }\n\nexport type RouteOptionsBaseIntersection<TCustomId, TPath> =\n  UnionToIntersection<RouteOptionsBase<TCustomId, TPath>>\n\nexport type MetaOptions = keyof PickRequired<RouteMeta> extends never\n  ? {\n      meta?: RouteMeta\n    }\n  : {\n      meta: RouteMeta\n    }\n\ntype GetContextFn<\n  TParentRoute,\n  TAllParams,\n  TFullSearchSchema,\n  TParentContext,\n  TAllParentContext,\n  TRouteContext,\n> = (\n  opts: {\n    params: TAllParams\n    search: TFullSearchSchema\n  } & (TParentRoute extends undefined\n    ? {\n        context?: TAllParentContext\n        parentContext?: TParentContext\n      }\n    : {\n        context: TAllParentContext\n        parentContext: TParentContext\n      }),\n) => TRouteContext\n\nexport type ContextOptions<\n  TParentRoute,\n  TAllParams,\n  TFullSearchSchema,\n  TParentContext,\n  TAllParentContext,\n  TRouteContext,\n> = keyof PickRequired<RouteContext> extends never\n  ? {\n      getContext?: GetContextFn<\n        TParentRoute,\n        TAllParams,\n        TFullSearchSchema,\n        TParentContext,\n        TAllParentContext,\n        TRouteContext\n      >\n    }\n  : {\n      getContext: GetContextFn<\n        TParentRoute,\n        TAllParams,\n        TFullSearchSchema,\n        TParentContext,\n        TAllParentContext,\n        TRouteContext\n      >\n    }\n\nexport type RouteProps<\n  TParentRoute extends AnyRoute,\n  TPath extends string,\n  TFullPath extends ResolveFullPath<\n    TParentRoute,\n    TPath,\n    RoutePrefix<TParentRoute['fullPath'], TPath>\n  >,\n  TCustomId extends string,\n  TId extends ResolveId<TParentRoute, TCustomId, TPath>,\n  TLoader,\n  TSearchSchema extends AnySearchSchema,\n  TFullSearchSchema extends AnySearchSchema,\n  TAllParams,\n  TParentContext,\n  TAllParentContext extends IsAny<\n    TParentRoute['__types']['allParams'],\n    TParentContext,\n    TParentRoute['__types']['allParams'] & TParentContext\n  >,\n  TRouteContext,\n  TContext,\n  TRouterContext extends AnyContext,\n> = {\n  useMatch: () => RouteMatch<\n    AnyRoutesInfo,\n    Route<\n      TParentRoute,\n      TPath,\n      TFullPath,\n      TCustomId,\n      TId,\n      TLoader,\n      TSearchSchema,\n      TFullSearchSchema,\n      TParentContext,\n      TAllParentContext,\n      TRouteContext,\n      TContext,\n      TRouterContext,\n      any,\n      any\n    >\n  >\n  useLoader: () => UseLoaderResult<TLoader>\n  useSearch: <\n    TStrict extends boolean = true,\n    TSearch = TFullSearchSchema,\n    TSelected = TSearch,\n  >(opts?: {\n    strict?: TStrict\n    select?: (search: TSearch) => TSelected\n  }) => TStrict extends true ? TSelected : TSelected | undefined\n  useParams: <\n    TDefaultSelected = TAllParams,\n    TSelected = TDefaultSelected,\n  >(opts?: {\n    select?: (params: TDefaultSelected) => TSelected\n  }) => TSelected\n  useContext: <\n    TDefaultSelected = TContext,\n    TSelected = TDefaultSelected,\n  >(opts?: {\n    select?: (context: TDefaultSelected) => TSelected\n  }) => TSelected\n}\n\nexport type RouteOptions<\n  TParentRoute extends AnyRoute = AnyRoute,\n  TCustomId extends string = string,\n  TPath extends string = string,\n  TLoader = unknown,\n  TParentSearchSchema extends {} = {},\n  TSearchSchema extends AnySearchSchema = {},\n  TFullSearchSchema extends AnySearchSchema = TSearchSchema,\n  TParentParams extends AnyPathParams = {},\n  TParams = Record<ParsePathParams<TPath>, string>,\n  TAllParams = TParams,\n  TParentContext extends AnyContext = AnyContext,\n  TAllParentContext extends IsAny<\n    TParentRoute['__types']['allParams'],\n    TParentContext,\n    TParentRoute['__types']['allParams'] & TParentContext\n  > = IsAny<\n    TParentRoute['__types']['allParams'],\n    TParentContext,\n    TParentRoute['__types']['allParams'] & TParentContext\n  >,\n  TRouteContext extends RouteContext = RouteContext,\n  TContext extends MergeFromParent<\n    TAllParentContext,\n    TRouteContext\n  > = MergeFromParent<TAllParentContext, TRouteContext>,\n> = RouteOptionsBase<TCustomId, TPath> & {\n  getParentRoute: () => TParentRoute\n  // Optionally call this function to get a unique key for this route.\n  // This is useful for routes that need to be uniquely identified\n  // by more than their by search params\n  getKey?: OnLoadFnKey<\n    TSearchSchema,\n    TFullSearchSchema,\n    TAllParams,\n    NoInfer<TRouteContext>,\n    TContext\n  >\n  // If true, this route will be matched as case-sensitive\n  caseSensitive?: boolean\n  // Filter functions that can manipulate search params *before* they are passed to links and navigate\n  // calls that match this route.\n  preSearchFilters?: SearchFilter<TFullSearchSchema>[]\n  // Filter functions that can manipulate search params *after* they are passed to links and navigate\n  // calls that match this route.\n  postSearchFilters?: SearchFilter<TFullSearchSchema>[]\n  // The content to be rendered when the route is matched. If no component is provided, defaults to `<Outlet />`\n  component?: RouteComponent<\n    RouteProps<\n      TParentRoute,\n      TPath,\n      ResolveFullPath<TParentRoute, TPath>,\n      TCustomId,\n      ResolveId<TParentRoute, TCustomId, TPath>,\n      TLoader,\n      TSearchSchema,\n      TFullSearchSchema,\n      TAllParams,\n      TParentContext,\n      TAllParentContext,\n      TRouteContext,\n      TContext,\n      NoInfer<TRouteContext>\n    >\n  > //\n  // The content to be rendered when the route encounters an error\n  errorComponent?: RouteComponent<{\n    error: Error\n    info: { componentStack: string }\n  }> //\n  // If supported by your framework, the content to be rendered as the fallback content until the route is ready to render\n  pendingComponent?: RouteComponent<\n    RouteProps<\n      TParentRoute,\n      TPath,\n      ResolveFullPath<TParentRoute, TPath>,\n      TCustomId,\n      ResolveId<TParentRoute, TCustomId, TPath>,\n      TLoader,\n      TSearchSchema,\n      TFullSearchSchema,\n      TAllParams,\n      TParentContext,\n      TAllParentContext,\n      TRouteContext,\n      TContext,\n      NoInfer<TRouteContext>\n    >\n  > //\n  wrapInSuspense?: boolean\n\n  // This async function is called before a route is loaded.\n  // If an error is thrown here, the route's loader will not be called.\n  // If thrown during a navigation, the navigation will be cancelled and the error will be passed to the `onLoadError` function.\n  // If thrown during a preload event, the error will be logged to the console.\n  beforeLoad?: (opts: {\n    router: AnyRouter\n    match: AnyRouteMatch\n  }) => Promise<void> | void\n  // This function will be called if the route's loader throws an error **during an attempted navigation**.\n  // If you want to redirect due to an error, call `router.navigate()` from within this function.\n  onBeforeLoadError?: (err: any) => void\n  validateSearch?: SearchSchemaValidator<TSearchSchema, TParentSearchSchema>\n  // This function will be called if the route's validateSearch option throws an error **during an attempted validation**.\n  // If you want to redirect due to an error, call `router.navigate()` from within this function.\n  // If you want to display the errorComponent, rethrow the error\n  onValidateSearchError?: (err: any) => void\n  onParseParamsError?: (err: any) => void\n  // An asynchronous function responsible for preparing or fetching data for the route before it is rendered\n  loader?: OnLoadFn<\n    TLoader,\n    TSearchSchema,\n    TFullSearchSchema,\n    TAllParams,\n    NoInfer<TRouteContext>,\n    TContext\n  >\n  onLoadError?: (err: any) => void\n  onError?: (err: any) => void\n  // This function is called\n  // when moving from an inactive state to an active one. Likewise, when moving from\n  // an active to an inactive state, the return function (if provided) is called.\n  onLoaded?: (matchContext: {\n    params: TAllParams\n    search: TFullSearchSchema\n  }) =>\n    | void\n    | undefined\n    | ((match: { params: TAllParams; search: TFullSearchSchema }) => void)\n  // This function is called when the route remains active from one transition to the next.\n  onTransition?: (match: {\n    params: TAllParams\n    search: TFullSearchSchema\n  }) => void\n} & MetaOptions &\n  ContextOptions<\n    TParentRoute,\n    TAllParams,\n    TFullSearchSchema,\n    TParentContext,\n    TAllParentContext,\n    TRouteContext\n  > &\n  (\n    | {\n        // Parse params optionally receives path params as strings and returns them in a parsed format (like a number or boolean)\n        parseParams?: (\n          rawParams: IsAny<TPath, any, Record<ParsePathParams<TPath>, string>>,\n        ) => TParams extends Record<ParsePathParams<TPath>, any>\n          ? TParams\n          : 'parseParams must return an object'\n        stringifyParams?: (\n          params: NoInfer<TParams>,\n        ) => Record<ParsePathParams<TPath>, string>\n      }\n    | {\n        stringifyParams?: never\n        parseParams?: never\n      }\n  ) &\n  (PickUnsafe<TParentParams, ParsePathParams<TPath>> extends never // Detect if an existing path param is being redefined\n    ? { test?: PickUnsafe<TParentParams, ParsePathParams<TPath>> }\n    : 'Cannot redefined path params in child routes!')\n\n// The parse type here allows a zod schema to be passed directly to the validator\nexport type SearchSchemaValidator<TReturn, TParentSchema> =\n  | SearchSchemaValidatorObj<TReturn, TParentSchema>\n  | SearchSchemaValidatorFn<TReturn, TParentSchema>\n\nexport type SearchSchemaValidatorObj<TReturn, TParentSchema> = {\n  parse?: SearchSchemaValidatorFn<TReturn, TParentSchema>\n}\n\nexport type SearchSchemaValidatorFn<TReturn, TParentSchema> = (\n  searchObj: Record<string, unknown>,\n) => {} extends TParentSchema\n  ? TReturn\n  : keyof TReturn extends keyof TParentSchema\n  ? {\n      error: 'Top level search params cannot be redefined by child routes!'\n      keys: keyof TReturn & keyof TParentSchema\n    }\n  : TReturn\n\nexport type DefinedPathParamWarning =\n  'Path params cannot be redefined by child routes!'\n\nexport type ParentParams<TParentParams> = AnyPathParams extends TParentParams\n  ? {}\n  : {\n      [Key in keyof TParentParams]?: DefinedPathParamWarning\n    }\n\nexport type OnLoadFn<\n  TLoader = unknown,\n  TSearchSchema extends AnySearchSchema = {},\n  TFullSearchSchema extends AnySearchSchema = {},\n  TAllParams = {},\n  TContext extends AnyContext = AnyContext,\n  TAllContext extends AnyContext = AnyContext,\n> = (\n  match: LoaderContext<\n    TSearchSchema,\n    TFullSearchSchema,\n    TAllParams,\n    TContext,\n    TAllContext\n  > & {\n    parentMatchPromise?: Promise<void>\n  },\n) => Promise<TLoader> | TLoader\n\nexport type OnLoadFnKey<\n  TSearchSchema extends AnySearchSchema = {},\n  TFullSearchSchema extends AnySearchSchema = {},\n  TAllParams = {},\n  TContext extends AnyContext = AnyContext,\n  TAllContext extends AnyContext = AnyContext,\n> = (\n  loaderContext: {\n    params: TAllParams\n    search: TFullSearchSchema\n  },\n  // loaderContext: LoaderContext<\n  //   TSearchSchema,\n  //   TFullSearchSchema,\n  //   TAllParams,\n  //   TContext,\n  //   TAllContext\n  // >,\n) => any\n\nexport interface LoaderContext<\n  TSearchSchema extends AnySearchSchema = {},\n  TFullSearchSchema extends AnySearchSchema = {},\n  TAllParams = {},\n  TContext extends AnyContext = AnyContext,\n  TAllContext extends AnyContext = AnyContext,\n> {\n  params: TAllParams\n  routeSearch: TSearchSchema\n  search: TFullSearchSchema\n  abortController: AbortController\n  preload: boolean\n  routeContext: TContext\n  context: TAllContext\n  // serverOnly: <\n  //   TServer extends object | (() => object),\n  //   TClient extends object | (() => object),\n  // >(\n  //   server: TServer,\n  //   client: TClient,\n  // ) => (TServer extends () => infer TReturn ? TReturn : TServer) &\n  //   (TClient extends () => infer TReturn ? TReturn : TClient)\n}\n\nexport type UnloaderFn<TPath extends string> = (\n  routeMatch: RouteMatch<any, Route>,\n) => void\n\nexport type SearchFilter<T, U = T> = (prev: T) => U\n\ntype ResolveId<\n  TParentRoute,\n  TCustomId extends string,\n  TPath extends string,\n> = TParentRoute extends { id: infer TParentId extends string }\n  ? RoutePrefix<TParentId, string extends TCustomId ? TPath : TCustomId>\n  : RootRouteId\n\nexport type InferFullSearchSchema<TRoute> = TRoute extends {\n  isRoot: true\n  __types: {\n    searchSchema: infer TSearchSchema\n  }\n}\n  ? TSearchSchema\n  : TRoute extends {\n      __types: {\n        fullSearchSchema: infer TFullSearchSchema\n      }\n    }\n  ? TFullSearchSchema\n  : {}\n\nexport type ResolveFullSearchSchema<TParentRoute, TSearchSchema> =\n  InferFullSearchSchema<TParentRoute> & TSearchSchema\n\nexport interface AnyRoute\n  extends Route<\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any\n  > {}\n\nexport type AnyRouteWithRouterContext<TRouterContext extends AnyContext> =\n  Route<\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    TRouterContext,\n    any,\n    any\n  >\n\ntype MergeFromParent<T, U> = IsAny<T, U, T & U>\n\nexport type UseLoaderResult<T> = T extends Record<PropertyKey, infer U>\n  ? {\n      [K in keyof T]: UseLoaderResultPromise<T[K]>\n    }\n  : UseLoaderResultPromise<T>\n\nexport type UseLoaderResultPromise<T> = T extends Promise<infer U>\n  ? StreamedPromise<U>\n  : T\n\nexport type StreamedPromise<T> = {\n  promise: Promise<T>\n  status: 'resolved' | 'pending'\n  data: T\n  resolve: (value: T) => void\n}\n\nexport class Route<\n  TParentRoute extends AnyRoute = AnyRoute,\n  TPath extends string = '/',\n  TFullPath extends ResolveFullPath<TParentRoute, TPath> = ResolveFullPath<\n    TParentRoute,\n    TPath\n  >,\n  TCustomId extends string = string,\n  TId extends ResolveId<TParentRoute, TCustomId, TPath> = ResolveId<\n    TParentRoute,\n    TCustomId,\n    TPath\n  >,\n  TLoader = unknown,\n  TSearchSchema extends AnySearchSchema = {},\n  TFullSearchSchema extends AnySearchSchema = ResolveFullSearchSchema<\n    TParentRoute,\n    TSearchSchema\n  >,\n  TParams extends Record<ParsePathParams<TPath>, any> = Record<\n    ParsePathParams<TPath>,\n    string\n  >,\n  TAllParams extends MergeFromParent<\n    TParentRoute['__types']['allParams'],\n    TParams\n  > = MergeFromParent<TParentRoute['__types']['allParams'], TParams>,\n  TParentContext extends TParentRoute['__types']['routeContext'] = TParentRoute['__types']['routeContext'],\n  TAllParentContext extends TParentRoute['__types']['context'] = TParentRoute['__types']['context'],\n  TRouteContext extends RouteContext = RouteContext,\n  TContext extends MergeFromParent<\n    TParentRoute['__types']['context'],\n    TRouteContext\n  > = MergeFromParent<TParentRoute['__types']['context'], TRouteContext>,\n  TRouterContext extends AnyContext = AnyContext,\n  TChildren extends unknown = unknown,\n  TRoutesInfo extends DefaultRoutesInfo = DefaultRoutesInfo,\n> {\n  __types!: {\n    parentRoute: TParentRoute\n    path: TPath\n    to: TrimPathRight<TFullPath>\n    fullPath: TFullPath\n    customId: TCustomId\n    id: TId\n    loader: TLoader\n    searchSchema: TSearchSchema\n    fullSearchSchema: TFullSearchSchema\n    params: TParams\n    allParams: TAllParams\n    parentContext: TParentContext\n    allParentContext: TAllParentContext\n    routeContext: TRouteContext\n    context: TContext\n    children: TChildren\n    routesInfo: TRoutesInfo\n    routerContext: TRouterContext\n  }\n  isRoot: TParentRoute extends Route<any> ? true : false\n  options: RouteOptions<\n    TParentRoute,\n    TCustomId,\n    TPath,\n    TLoader,\n    InferFullSearchSchema<TParentRoute>,\n    TSearchSchema,\n    InferFullSearchSchema<TParentRoute> & TSearchSchema,\n    TParentRoute['__types']['allParams'],\n    TParams,\n    TAllParams,\n    TParentContext,\n    TAllParentContext,\n    TRouteContext,\n    TContext\n  >\n\n  // Set up in this.init()\n  parentRoute!: TParentRoute\n  id!: TId\n  // customId!: TCustomId\n  path!: TPath\n  fullPath!: TFullPath\n  to!: TrimPathRight<TFullPath>\n\n  // Optional\n  children?: TChildren\n  originalIndex?: number\n  router?: Router<TRoutesInfo['routeTree'], TRoutesInfo>\n  rank!: number\n\n  constructor(\n    options: RouteOptions<\n      TParentRoute,\n      TCustomId,\n      TPath,\n      TLoader,\n      InferFullSearchSchema<TParentRoute>,\n      TSearchSchema,\n      TFullSearchSchema,\n      TParentRoute['__types']['allParams'],\n      TParams,\n      TAllParams,\n      TParentContext,\n      TAllParentContext,\n      TRouteContext,\n      TContext\n    >,\n  ) {\n    this.options = (options as any) || {}\n    this.isRoot = !options?.getParentRoute as any\n  }\n\n  init = (opts: { originalIndex: number; router: AnyRouter }) => {\n    this.originalIndex = opts.originalIndex\n    this.router = opts.router\n\n    const allOptions = this.options as RouteOptions<\n      TParentRoute,\n      TCustomId,\n      TPath,\n      TLoader,\n      InferFullSearchSchema<TParentRoute>,\n      TSearchSchema,\n      TFullSearchSchema,\n      TParentRoute['__types']['allParams'],\n      TParams,\n      TAllParams,\n      TParentContext,\n      TAllParentContext,\n      TRouteContext,\n      TContext\n    > &\n      RouteOptionsBaseIntersection<TCustomId, TPath>\n\n    const isRoot = !allOptions?.path && !allOptions?.id\n\n    this.parentRoute = this.options?.getParentRoute?.()\n\n    if (isRoot) {\n      this.path = rootRouteId as TPath\n    } else {\n      invariant(\n        this.parentRoute,\n        `Child Route instances must pass a 'getParentRoute: () => ParentRoute' option that returns a Route instance.`,\n      )\n    }\n\n    let path: undefined | string = isRoot ? rootRouteId : allOptions.path\n\n    // If the path is anything other than an index path, trim it up\n    if (path && path !== '/') {\n      path = trimPath(path)\n    }\n\n    const customId = allOptions?.id || path\n\n    // Strip the parentId prefix from the first level of children\n    let id = isRoot\n      ? rootRouteId\n      : joinPaths([\n          (this.parentRoute.id as any) === rootRouteId\n            ? ''\n            : this.parentRoute.id,\n          customId,\n        ])\n\n    if (path === rootRouteId) {\n      path = '/'\n    }\n\n    if (id !== rootRouteId) {\n      id = joinPaths(['/', id])\n    }\n\n    const fullPath =\n      id === rootRouteId ? '/' : joinPaths([this.parentRoute.fullPath, path])\n\n    this.path = path as TPath\n    this.id = id as TId\n    // this.customId = customId as TCustomId\n    this.fullPath = fullPath as TFullPath\n    this.to = fullPath as TrimPathRight<TFullPath>\n  }\n\n  addChildren = <TNewChildren extends AnyRoute[]>(\n    children: TNewChildren,\n  ): Route<\n    TParentRoute,\n    TPath,\n    TFullPath,\n    TCustomId,\n    TId,\n    TLoader,\n    TSearchSchema,\n    TFullSearchSchema,\n    TParams,\n    TAllParams,\n    TParentContext,\n    TAllParentContext,\n    TRouteContext,\n    TContext,\n    TRouterContext,\n    TNewChildren,\n    TRoutesInfo\n  > => {\n    this.children = children as any\n    return this as any\n  }\n\n  useMatch = <TStrict extends boolean = true, TSelected = TContext>(opts?: {\n    strict?: TStrict\n    select?: (search: TContext) => TSelected\n  }): TStrict extends true ? TSelected : TSelected | undefined => {\n    return useMatch({ ...opts, from: this.id }) as any\n  }\n\n  useLoader = <TStrict extends boolean = true, TSelected = TLoader>(opts?: {\n    strict?: TStrict\n    select?: (search: TLoader) => TSelected\n  }): TStrict extends true\n    ? UseLoaderResult<TSelected>\n    : UseLoaderResult<TSelected> | undefined => {\n    return useLoader({ ...opts, from: this.id }) as any\n  }\n\n  useContext = <TStrict extends boolean = true, TSelected = TContext>(opts?: {\n    strict?: TStrict\n    select?: (search: TContext) => TSelected\n  }): TStrict extends true ? TSelected : TSelected | undefined => {\n    return useMatch({\n      ...opts,\n      from: this.id,\n      select: (d: any) => opts?.select?.(d.context) ?? d.context,\n    } as any)\n  }\n\n  useSearch = <\n    TStrict extends boolean = true,\n    TSelected = TFullSearchSchema,\n  >(opts?: {\n    strict?: TStrict\n    select?: (search: TFullSearchSchema) => TSelected\n  }): TStrict extends true ? TSelected : TSelected | undefined => {\n    return useSearch({ ...opts, from: this.id } as any)\n  }\n\n  useParams = <TStrict extends boolean = true, TSelected = TAllParams>(opts?: {\n    strict?: TStrict\n    select?: (search: TAllParams) => TSelected\n  }): TStrict extends true ? TSelected : TSelected | undefined => {\n    return useParams({ ...opts, from: this.id } as any)\n  }\n}\n\nexport type AnyRootRoute = RootRoute<any, any, any, any>\n\nexport class RouterContext<TRouterContext extends {}> {\n  constructor() {}\n\n  createRootRoute = <\n    TLoader = unknown,\n    TSearchSchema extends AnySearchSchema = {},\n    TContext extends RouteContext = RouteContext,\n  >(\n    options?: Omit<\n      RouteOptions<\n        AnyRoute,\n        RootRouteId,\n        '',\n        TLoader,\n        {},\n        TSearchSchema,\n        NoInfer<TSearchSchema>,\n        {},\n        TRouterContext,\n        TRouterContext,\n        TContext,\n        NoInfer<TContext>\n      >,\n      | 'path'\n      | 'id'\n      | 'getParentRoute'\n      | 'caseSensitive'\n      | 'parseParams'\n      | 'stringifyParams'\n    >,\n  ) => {\n    return new RootRoute<TLoader, TSearchSchema, TContext, TRouterContext>(\n      options,\n    )\n  }\n\n  //   return <\n  //     TLoader = unknown,\n  //     TSearchSchema extends AnySearchSchema = {},\n  //     TContext extends {} = {},\n  //   >(\n  //     options?: Omit<\n  //       RouteOptions<\n  //         AnyRoute,\n  //         RootRouteId,\n  //         '',\n  //         TLoader,\n  //         {},\n  //         TSearchSchema,\n  //         NoInfer<TSearchSchema>,\n  //         {},\n  //         TRouterContext,\n  //         TRouterContext,\n  //         TContext,\n  //         TRouterContext & TContext\n  //       >,\n  //       'path' | 'id' | 'getParentRoute' | 'caseSensitive'\n  //     >,\n  //   ) =>\n  //     new RootRoute<TLoader, TSearchSchema, TContext, TRouterContext>(\n  //       options as any,\n  //     )\n  // }\n}\n\nexport class RootRoute<\n  TLoader = unknown,\n  TSearchSchema extends AnySearchSchema = {},\n  TContext extends RouteContext = RouteContext,\n  TRouterContext extends {} = {},\n> extends Route<\n  any,\n  '/',\n  '/',\n  string,\n  RootRouteId,\n  TLoader,\n  TSearchSchema,\n  TSearchSchema,\n  {},\n  {},\n  TRouterContext,\n  TRouterContext,\n  MergeFromParent<TRouterContext, TContext>,\n  MergeFromParent<TRouterContext, TContext>,\n  TRouterContext,\n  any,\n  any\n> {\n  constructor(\n    options?: Omit<\n      RouteOptions<\n        AnyRoute,\n        RootRouteId,\n        '',\n        TLoader,\n        {},\n        TSearchSchema,\n        NoInfer<TSearchSchema>,\n        {},\n        TRouterContext,\n        TRouterContext,\n        TContext,\n        NoInfer<TContext>\n      >,\n      | 'path'\n      | 'id'\n      | 'getParentRoute'\n      | 'caseSensitive'\n      | 'parseParams'\n      | 'stringifyParams'\n    >,\n  ) {\n    super(options as any)\n  }\n}\n\ntype ResolveFullPath<\n  TParentRoute extends AnyRoute,\n  TPath extends string,\n  TPrefixed extends RoutePrefix<TParentRoute['fullPath'], TPath> = RoutePrefix<\n    TParentRoute['fullPath'],\n    TPath\n  >,\n> = TPrefixed extends RootRouteId ? '/' : TPrefixed\n\ntype RoutePrefix<\n  TPrefix extends string,\n  TPath extends string,\n> = string extends TPath\n  ? RootRouteId\n  : TPath extends string\n  ? TPrefix extends RootRouteId\n    ? TPath extends '/'\n      ? '/'\n      : `/${TrimPath<TPath>}`\n    : `${TPrefix}/${TPath}` extends '/'\n    ? '/'\n    : `/${TrimPathLeft<`${TrimPathRight<TPrefix>}/${TrimPath<TPath>}`>}`\n  : never\n\nexport type TrimPath<T extends string> = '' extends T\n  ? ''\n  : TrimPathRight<TrimPathLeft<T>>\n\nexport type TrimPathLeft<T extends string> =\n  T extends `${RootRouteId}/${infer U}`\n    ? TrimPathLeft<U>\n    : T extends `/${infer U}`\n    ? TrimPathLeft<U>\n    : T\nexport type TrimPathRight<T extends string> = T extends '/'\n  ? '/'\n  : T extends `${infer U}/`\n  ? TrimPathRight<U>\n  : T\n\n// const rootRoute = new RootRoute({\n//   validateSearch: () => null as unknown as { root?: boolean },\n// })\n\n// const aRoute = new Route({\n//   getParentRoute: () => rootRoute,\n//   path: 'a',\n//   validateSearch: () => null as unknown as { a?: string },\n// })\n\n// const bRoute = new Route({\n//   getParentRoute: () => aRoute,\n//   path: 'b',\n// })\n\n// const rootIsRoot = rootRoute.isRoot\n// //    ^?\n// const aIsRoot = aRoute.isRoot\n// //    ^?\n\n// const rId = rootRoute.id\n// //    ^?\n// const aId = aRoute.id\n// //    ^?\n// const bId = bRoute.id\n// //    ^?\n\n// const rPath = rootRoute.fullPath\n// //    ^?\n// const aPath = aRoute.fullPath\n// //    ^?\n// const bPath = bRoute.fullPath\n// //    ^?\n\n// const rSearch = rootRoute.__types.fullSearchSchema\n// //    ^?\n// const aSearch = aRoute.__types.fullSearchSchema\n// //    ^?\n// const bSearch = bRoute.__types.fullSearchSchema\n// //    ^?\n\n// const config = rootRoute.addChildren([aRoute.addChildren([bRoute])])\n// //    ^?\n","import { decode, encode } from './qss'\nimport { AnySearchSchema } from './route'\n\nexport const defaultParseSearch = parseSearchWith(JSON.parse)\nexport const defaultStringifySearch = stringifySearchWith(JSON.stringify)\n\nexport function parseSearchWith(parser: (str: string) => any) {\n  return (searchStr: string): AnySearchSchema => {\n    if (searchStr.substring(0, 1) === '?') {\n      searchStr = searchStr.substring(1)\n    }\n\n    let query: Record<string, unknown> = decode(searchStr)\n\n    // Try to parse any query params that might be json\n    for (let key in query) {\n      const value = query[key]\n      if (typeof value === 'string') {\n        try {\n          query[key] = parser(value)\n        } catch (err) {\n          //\n        }\n      }\n    }\n\n    return query\n  }\n}\n\nexport function stringifySearchWith(stringify: (search: any) => string) {\n  return (search: Record<string, any>) => {\n    search = { ...search }\n\n    if (search) {\n      Object.keys(search).forEach((key) => {\n        const val = search[key]\n        if (typeof val === 'undefined' || val === undefined) {\n          delete search[key]\n        } else if (val && typeof val === 'object' && val !== null) {\n          try {\n            search[key] = stringify(val)\n          } catch (err) {\n            // silent\n          }\n        }\n      })\n    }\n\n    const searchStr = encode(search as Record<string, string>).toString()\n\n    return searchStr ? `?${searchStr}` : ''\n  }\n}\n","import { Store } from '@tanstack/react-store'\nimport invariant from 'tiny-invariant'\n\n//\n\nimport {\n  LinkInfo,\n  LinkOptions,\n  NavigateOptions,\n  ToOptions,\n  ResolveRelativePath,\n} from './link'\nimport {\n  cleanPath,\n  interpolatePath,\n  joinPaths,\n  matchPathname,\n  parsePathname,\n  resolvePath,\n  trimPath,\n  trimPathRight,\n} from './path'\nimport {\n  Route,\n  AnySearchSchema,\n  AnyRoute,\n  RootRoute,\n  AnyContext,\n  AnyPathParams,\n} from './route'\nimport {\n  RoutesInfo,\n  AnyRoutesInfo,\n  RoutesById,\n  RoutesByPath,\n  DefaultRoutesInfo,\n} from './routeInfo'\nimport { defaultParseSearch, defaultStringifySearch } from './searchParams'\nimport {\n  functionalUpdate,\n  last,\n  NoInfer,\n  pick,\n  PickAsRequired,\n  Timeout,\n  Updater,\n  replaceEqualDeep,\n  partialDeepEqual,\n} from './utils'\nimport {\n  createBrowserHistory,\n  createMemoryHistory,\n  RouterHistory,\n} from './history'\nimport { RouteComponent } from './react'\n\n//\n\ndeclare global {\n  interface Window {\n    __TSR_DEHYDRATED__?: HydrationCtx\n  }\n\n  interface Error {\n    cause: unknown\n  }\n\n  interface ErrorConstructor {\n    new (reason: string, options?: { cause?: unknown }): Error\n  }\n}\n\nexport interface Register {\n  // router: Router\n}\n\nexport type AnyRouter = Router<any, any, any>\n\nexport type RegisteredRouterPair = Register extends {\n  router: infer TRouter extends AnyRouter\n}\n  ? [TRouter, TRouter['types']['RoutesInfo']]\n  : [Router, AnyRoutesInfo]\n\nexport type RegisteredRouter = RegisteredRouterPair[0]\nexport type RegisteredRoutesInfo = RegisteredRouterPair[1]\n\nexport interface LocationState {}\n\nexport interface ParsedLocation<\n  TSearchObj extends AnySearchSchema = {},\n  TState extends LocationState = LocationState,\n> {\n  href: string\n  pathname: string\n  search: TSearchObj\n  searchStr: string\n  state: TState\n  hash: string\n  key?: string\n}\n\nexport interface FromLocation {\n  pathname: string\n  search?: unknown\n  key?: string\n  hash?: string\n}\n\nexport type SearchSerializer = (searchObj: Record<string, any>) => string\nexport type SearchParser = (searchStr: string) => Record<string, any>\n\nexport type HydrationCtx = {\n  router: DehydratedRouter\n  payload: Record<string, any>\n}\n\nexport interface RouteMatch<\n  TRoutesInfo extends AnyRoutesInfo = DefaultRoutesInfo,\n  TRoute extends AnyRoute = Route,\n> {\n  id: string\n  routeId: string\n  pathname: string\n  params: TRoute['__types']['allParams']\n  status: 'pending' | 'success' | 'error'\n  error: unknown\n  paramsError: unknown\n  searchError: unknown\n  updatedAt: number\n  loader: TRoute['__types']['loader']\n  loadPromise?: Promise<void>\n  __resolveLoadPromise?: () => void\n  routeContext: TRoute['__types']['routeContext']\n  context: TRoute['__types']['context']\n  routeSearch: TRoute['__types']['searchSchema']\n  search: TRoutesInfo['fullSearchSchema'] &\n    TRoute['__types']['fullSearchSchema']\n  fetchedAt: number\n  abortController: AbortController\n}\n\nexport type AnyRouteMatch = RouteMatch<AnyRoutesInfo, AnyRoute>\n\nexport type RouterContextOptions<TRouteTree extends AnyRoute> =\n  AnyContext extends TRouteTree['__types']['routerContext']\n    ? {\n        context?: TRouteTree['__types']['routerContext']\n      }\n    : {\n        context: TRouteTree['__types']['routerContext']\n      }\n\nexport interface RouterOptions<\n  TRouteTree extends AnyRoute,\n  TDehydrated extends Record<string, any>,\n> {\n  history?: RouterHistory\n  stringifySearch?: SearchSerializer\n  parseSearch?: SearchParser\n  defaultPreload?: false | 'intent'\n  defaultPreloadDelay?: number\n  defaultComponent?: RouteComponent\n  defaultErrorComponent?: RouteComponent<{\n    error: Error\n    info: { componentStack: string }\n  }>\n  defaultPendingComponent?: RouteComponent\n  defaultLoaderMaxAge?: number\n  defaultLoaderGcMaxAge?: number\n  caseSensitive?: boolean\n  routeTree?: TRouteTree\n  basepath?: string\n  createRoute?: (opts: { route: AnyRoute; router: AnyRouter }) => void\n  onRouteChange?: () => void\n  // fetchServerDataFn?: FetchServerDataFn\n  context?: TRouteTree['__types']['routerContext']\n  Wrap?: React.ComponentType<{\n    children: React.ReactNode\n    dehydratedState?: TDehydrated\n  }>\n  dehydrate?: () => TDehydrated\n  hydrate?: (dehydrated: TDehydrated) => void\n}\n\nexport interface RouterState<\n  TRoutesInfo extends AnyRoutesInfo = AnyRoutesInfo,\n  TState extends LocationState = LocationState,\n> {\n  status: 'idle' | 'pending'\n  matches: RouteMatch<TRoutesInfo, TRoutesInfo['routeIntersection']>[]\n  pendingMatches: RouteMatch<TRoutesInfo, TRoutesInfo['routeIntersection']>[]\n  preloadMatches: Record<\n    string,\n    RouteMatch<TRoutesInfo, TRoutesInfo['routeIntersection']>\n  >\n  location: ParsedLocation<TRoutesInfo['fullSearchSchema'], TState>\n  resolvedLocation: ParsedLocation<TRoutesInfo['fullSearchSchema'], TState>\n  lastUpdated: number\n}\n\nexport type ListenerFn = () => void\n\nexport interface BuildNextOptions {\n  to?: string | number | null\n  params?: true | Updater<unknown>\n  search?: true | Updater<unknown>\n  hash?: true | Updater<string>\n  state?: LocationState\n  key?: string\n  from?: string\n  fromCurrent?: boolean\n  __matches?: AnyRouteMatch[]\n}\n\nexport interface MatchLocation {\n  to?: string | number | null\n  fuzzy?: boolean\n  caseSensitive?: boolean\n  from?: string\n  fromCurrent?: boolean\n}\n\nexport interface MatchRouteOptions {\n  pending?: boolean\n  caseSensitive?: boolean\n  includeSearch?: boolean\n  fuzzy?: boolean\n}\n\ntype LinkCurrentTargetElement = {\n  preloadTimeout?: null | ReturnType<typeof setTimeout>\n}\n\nexport interface DehydratedRouterState\n  extends Pick<RouterState, 'status' | 'location' | 'lastUpdated'> {}\n\nexport interface DehydratedRouter {\n  state: DehydratedRouterState\n}\n\nexport type RouterConstructorOptions<\n  TRouteTree extends AnyRoute,\n  TDehydrated extends Record<string, any>,\n> = Omit<RouterOptions<TRouteTree, TDehydrated>, 'context'> &\n  RouterContextOptions<TRouteTree>\n\nexport const componentTypes = [\n  'component',\n  'errorComponent',\n  'pendingComponent',\n] as const\n\nexport class Router<\n  TRouteTree extends AnyRoute = AnyRoute,\n  TRoutesInfo extends AnyRoutesInfo = RoutesInfo<TRouteTree>,\n  TDehydrated extends Record<string, any> = Record<string, any>,\n> {\n  types!: {\n    RootRoute: TRouteTree\n    RoutesInfo: TRoutesInfo\n  }\n\n  options: PickAsRequired<\n    RouterOptions<TRouteTree, TDehydrated>,\n    'stringifySearch' | 'parseSearch' | 'context'\n  >\n  history!: RouterHistory\n  #unsubHistory?: () => void\n  basepath!: string\n  routeTree!: RootRoute\n  routesById!: RoutesById<TRoutesInfo>\n  routesByPath!: RoutesByPath<TRoutesInfo>\n  flatRoutes!: TRoutesInfo['routesByFullPath'][keyof TRoutesInfo['routesByFullPath']][]\n  navigateTimeout: undefined | Timeout\n  nextAction: undefined | 'push' | 'replace'\n  navigationPromise: undefined | Promise<void>\n\n  __store: Store<RouterState<TRoutesInfo>>\n  state: RouterState<TRoutesInfo>\n  startedLoadingAt = Date.now()\n  resolveNavigation: () => void = () => {}\n  dehydratedData?: TDehydrated\n\n  constructor(options: RouterConstructorOptions<TRouteTree, TDehydrated>) {\n    this.options = {\n      defaultPreloadDelay: 50,\n      context: undefined!,\n      ...options,\n      stringifySearch: options?.stringifySearch ?? defaultStringifySearch,\n      parseSearch: options?.parseSearch ?? defaultParseSearch,\n      // fetchServerDataFn: options?.fetchServerDataFn ?? defaultFetchServerDataFn,\n    }\n\n    this.__store = new Store<RouterState<TRoutesInfo>>(\n      getInitialRouterState(),\n      {\n        onUpdate: () => {\n          this.state = this.__store.state\n        },\n        defaultPriority: 'low',\n      },\n    )\n    this.state = this.__store.state\n\n    this.update(options)\n\n    const next = this.buildNext({\n      hash: true,\n      fromCurrent: true,\n      search: true,\n      state: true,\n    })\n\n    if (this.state.location.href !== next.href) {\n      this.#commitLocation({ ...next, replace: true })\n    }\n  }\n\n  reset = () => {\n    this.__store.setState((s) => Object.assign(s, getInitialRouterState()))\n  }\n\n  mount = () => {\n    // If the router matches are empty, start loading the matches\n    if (!this.state.matches.length) {\n      this.safeLoad()\n    }\n  }\n\n  update = (opts?: RouterOptions<any, any>): this => {\n    this.options = {\n      ...this.options,\n      ...opts,\n      context: {\n        ...this.options.context,\n        ...opts?.context,\n      },\n    }\n\n    if (\n      !this.history ||\n      (this.options.history && this.options.history !== this.history)\n    ) {\n      if (this.#unsubHistory) {\n        this.#unsubHistory()\n      }\n\n      this.history =\n        this.options.history ??\n        (isServer ? createMemoryHistory() : createBrowserHistory()!)\n\n      const parsedLocation = this.#parseLocation()\n\n      this.__store.setState((s) => ({\n        ...s,\n        resolvedLocation: parsedLocation,\n        location: parsedLocation,\n      }))\n\n      this.#unsubHistory = this.history.listen(() => {\n        this.safeLoad({\n          next: this.#parseLocation(this.state.location),\n        })\n      })\n    }\n\n    const { basepath, routeTree } = this.options\n\n    this.basepath = `/${trimPath(basepath ?? '') ?? ''}`\n\n    if (routeTree && routeTree !== this.routeTree) {\n      this.#buildRouteTree(routeTree)\n    }\n\n    return this\n  }\n\n  buildNext = (opts: BuildNextOptions): ParsedLocation => {\n    const next = this.#buildLocation(opts)\n\n    const __matches = this.matchRoutes(next.pathname, next.search)\n\n    return this.#buildLocation({\n      ...opts,\n      __matches,\n    })\n  }\n\n  cancelMatches = () => {\n    this.state.matches.forEach((match) => {\n      this.cancelMatch(match.id)\n    })\n  }\n\n  cancelMatch = (id: string) => {\n    this.getRouteMatch(id)?.abortController?.abort()\n  }\n\n  safeLoad = (opts?: { next?: ParsedLocation }) => {\n    this.load(opts).catch((err) => {\n      // console.warn(err)\n      // invariant(false, 'Encountered an error during router.load()! ☝️.')\n    })\n  }\n\n  load = async (opts?: { next?: ParsedLocation }): Promise<void> => {\n    this.#createNavigationPromise()\n\n    let now = Date.now()\n    const startedAt = now\n    this.startedLoadingAt = startedAt\n\n    // Cancel any pending matches\n    this.cancelMatches()\n\n    let pendingMatches!: RouteMatch<any, any>[]\n\n    this.__store.batch(() => {\n      if (opts?.next) {\n        // Ingest the new location\n        this.__store.setState((s) => ({\n          ...s,\n          location: opts.next!,\n        }))\n      }\n\n      // Match the routes\n      pendingMatches = this.matchRoutes(\n        this.state.location.pathname,\n        this.state.location.search,\n        {\n          // throwOnError: true,\n        },\n      )\n\n      this.__store.setState((s) => ({\n        ...s,\n        status: 'pending',\n        pendingMatches,\n      }))\n    })\n\n    // Load the matches\n    await this.loadMatches(pendingMatches)\n\n    if (this.startedLoadingAt !== startedAt) {\n      // Ignore side-effects of outdated side-effects\n      return this.navigationPromise\n    }\n\n    const prevLocation = this.state.resolvedLocation\n\n    this.__store.setState((s) => ({\n      ...s,\n      status: 'idle',\n      resolvedLocation: s.location,\n      matches: s.pendingMatches,\n      pendingMatches: [],\n    }))\n\n    if (prevLocation!.href !== this.state.location.href) {\n      this.options.onRouteChange?.()\n    }\n\n    this.resolveNavigation()\n  }\n\n  getRoute = <TId extends keyof TRoutesInfo['routesById']>(\n    id: TId,\n  ): TRoutesInfo['routesById'][TId] => {\n    const route = this.routesById[id]\n\n    invariant(route, `Route with id \"${id as string}\" not found`)\n\n    return route\n  }\n\n  preloadRoute = async (\n    navigateOpts: BuildNextOptions = this.state.location,\n  ) => {\n    const next = this.buildNext(navigateOpts)\n    const matches = this.matchRoutes(next.pathname, next.search, {\n      throwOnError: true,\n    })\n\n    const matchesById: any = {}\n\n    matches.forEach((m) => {\n      if (!this.state.matches.find((d) => d.id === m.id)) {\n        matchesById[m.id] = m\n      }\n    })\n\n    this.__store.setState((s) => {\n      return {\n        ...s,\n        preloadMatches: {\n          ...s.preloadMatches,\n          ...matchesById,\n        },\n      }\n    })\n\n    await this.loadMatches(matches, {\n      preload: true,\n    })\n    return matches\n  }\n\n  matchRoutes = (\n    pathname: string,\n    locationSearch: AnySearchSchema,\n    opts?: { throwOnError?: boolean },\n  ): RouteMatch<TRoutesInfo, TRoutesInfo['routeIntersection']>[] => {\n    let routeParams: AnyPathParams = {}\n\n    let foundRoute = this.flatRoutes.find((route) => {\n      const matchedParams = matchPathname(this.basepath, pathname, {\n        to: route.fullPath,\n        caseSensitive:\n          route.options.caseSensitive ?? this.options.caseSensitive,\n      })\n\n      if (matchedParams) {\n        routeParams = matchedParams\n        return true\n      }\n\n      return false\n    })\n\n    let routeCursor = foundRoute || (this.routesById['__root__'] as any)\n\n    let matchedRoutes: AnyRoute[] = [routeCursor]\n\n    while (routeCursor?.parentRoute) {\n      routeCursor = routeCursor.parentRoute\n      if (routeCursor) matchedRoutes.unshift(routeCursor)\n    }\n\n    // Alright, by now we should have all of our\n    // matching routes and their param pairs, let's\n    // Turn them into actual `Match` objects and\n    // accumulate the params into a single params bag\n    let allParams = {}\n\n    // Existing matches are matches that are already loaded along with\n    // pending matches that are still loading\n\n    const matches = matchedRoutes.map((route) => {\n      let parsedParams\n      let parsedParamsError\n\n      try {\n        parsedParams = route.options.parseParams?.(routeParams!) ?? routeParams\n      } catch (err: any) {\n        parsedParamsError = new PathParamError(err.message, {\n          cause: err,\n        })\n\n        if (opts?.throwOnError) {\n          throw parsedParamsError\n        }\n      }\n\n      // Add the parsed params to the accumulated params bag\n      Object.assign(allParams, parsedParams)\n\n      const interpolatedPath = interpolatePath(route.path, allParams)\n      const matchId =\n        interpolatePath(route.id, allParams, true) +\n        (route.options.getKey?.({\n          params: allParams,\n          search: locationSearch,\n        }) ?? '')\n\n      // Waste not, want not. If we already have a match for this route,\n      // reuse it. This is important for layout routes, which might stick\n      // around between navigation actions that only change leaf routes.\n      const existingMatch = this.getRouteMatch(matchId)\n\n      if (existingMatch) {\n        // Return a copy, we don't want to mutate the existing match\n        return { ...existingMatch }\n      }\n\n      // Create a fresh route match\n      const hasLoaders = !!(\n        route.options.loader ||\n        componentTypes.some((d) => route.options[d]?.preload)\n      )\n\n      const routeMatch: RouteMatch = {\n        id: matchId,\n        routeId: route.id,\n        params: allParams,\n        pathname: joinPaths([this.basepath, interpolatedPath]),\n        updatedAt: 0,\n        routeSearch: {},\n        search: {} as any,\n        status: hasLoaders ? 'pending' : 'success',\n        error: undefined,\n        paramsError: parsedParamsError,\n        searchError: undefined,\n        loader: undefined,\n        loadPromise: Promise.resolve(),\n        routeContext: undefined!,\n        context: undefined!,\n        abortController: new AbortController(),\n        fetchedAt: 0,\n      }\n\n      return routeMatch\n    })\n\n    // Take each match and resolve its search params and context\n    // This has to happen after the matches are created or found\n    // so that we can use the parent match's search params and context\n    matches.forEach((match, i): any => {\n      const parentMatch = matches[i - 1]\n      const route = this.getRoute(match.routeId)\n\n      const searchInfo = (() => {\n        // Validate the search params and stabilize them\n        const parentSearchInfo = {\n          search: parentMatch?.search ?? locationSearch,\n          routeSearch: parentMatch?.routeSearch ?? locationSearch,\n        }\n\n        try {\n          const validator =\n            typeof route.options.validateSearch === 'object'\n              ? route.options.validateSearch.parse\n              : route.options.validateSearch\n\n          const routeSearch = validator?.(parentSearchInfo.search) ?? {}\n\n          const search = {\n            ...parentSearchInfo.search,\n            ...routeSearch,\n          }\n\n          return {\n            routeSearch: replaceEqualDeep(match.routeSearch, routeSearch),\n            search: replaceEqualDeep(match.search, search),\n          }\n        } catch (err: any) {\n          match.searchError = new SearchParamError(err.message, {\n            cause: err,\n          })\n\n          if (opts?.throwOnError) {\n            throw match.searchError\n          }\n\n          return parentSearchInfo\n        }\n      })()\n\n      const contextInfo = (() => {\n        try {\n          const routeContext =\n            route.options.getContext?.({\n              parentContext: parentMatch?.routeContext ?? {},\n              context: parentMatch?.context ?? this?.options.context ?? {},\n              params: match.params,\n              search: match.search,\n            }) || ({} as any)\n\n          const context = {\n            ...(parentMatch?.context ?? this?.options.context),\n            ...routeContext,\n          } as any\n\n          return {\n            context,\n            routeContext,\n          }\n        } catch (err) {\n          route.options.onError?.(err)\n          throw err\n        }\n      })()\n\n      Object.assign(match, {\n        ...searchInfo,\n        ...contextInfo,\n      })\n    })\n\n    return matches\n  }\n\n  loadMatches = async (\n    resolvedMatches: AnyRouteMatch[],\n    opts?: {\n      preload?: boolean\n    },\n  ) => {\n    let firstBadMatchIndex: number | undefined\n\n    // Check each match middleware to see if the route can be accessed\n    try {\n      await Promise.all(\n        resolvedMatches.map(async (match, index) => {\n          const route = this.getRoute(match.routeId)\n\n          const handleError = (\n            err: any,\n            handler: undefined | ((err: any) => void),\n          ) => {\n            firstBadMatchIndex = firstBadMatchIndex ?? index\n            handler = handler || route.options.onError\n\n            if (isRedirect(err)) {\n              throw err\n            }\n\n            try {\n              handler?.(err)\n            } catch (errorHandlerErr) {\n              err = errorHandlerErr\n\n              if (isRedirect(errorHandlerErr)) {\n                throw errorHandlerErr\n              }\n            }\n\n            this.setRouteMatch(match.id, (s) => ({\n              ...s,\n              error: err,\n              status: 'error',\n              updatedAt: Date.now(),\n            }))\n          }\n\n          if (match.paramsError) {\n            handleError(match.paramsError, route.options.onParseParamsError)\n          }\n\n          if (match.searchError) {\n            handleError(match.searchError, route.options.onValidateSearchError)\n          }\n\n          try {\n            await route.options.beforeLoad?.({\n              router: this as any,\n              match,\n            })\n          } catch (err) {\n            handleError(err, route.options.onBeforeLoadError)\n          }\n        }),\n      )\n    } catch (err) {\n      if (isRedirect(err)) {\n        if (!opts?.preload) {\n          this.navigate(err as any)\n        }\n        return\n      }\n\n      throw err // we should never end up here\n    }\n\n    const validResolvedMatches = resolvedMatches.slice(0, firstBadMatchIndex)\n    const matchPromises: Promise<any>[] = []\n\n    validResolvedMatches.forEach((match, index) => {\n      matchPromises.push(\n        Promise.resolve().then(async () => {\n          const parentMatchPromise = matchPromises[index - 1]\n          const route = this.getRoute(match.routeId)\n          const fetchedAt = Date.now()\n          const loadPromise = Promise.resolve().then(async () => {\n            const checkLatest = () => {\n              const latest = this.getRouteMatch(match.id)\n              return latest && latest.fetchedAt !== fetchedAt\n                ? latest.loadPromise\n                : undefined\n            }\n\n            let latestPromise\n\n            const componentsPromise = (async () => {\n              // then run all component and data loaders in parallel\n              // For each component type, potentially load it asynchronously\n\n              await Promise.all(\n                componentTypes.map(async (type) => {\n                  const component = route.options[type]\n\n                  if (component?.preload) {\n                    await component.preload()\n                  }\n                }),\n              )\n            })()\n\n            const loaderPromise = Promise.resolve().then(() => {\n              if (route.options.loader) {\n                return route.options.loader({\n                  ...match,\n                  preload: !!opts?.preload,\n                  parentMatchPromise,\n                })\n              }\n              return\n            })\n\n            try {\n              const [_, loader] = await Promise.all([\n                componentsPromise,\n                loaderPromise,\n              ])\n              if ((latestPromise = checkLatest())) return await latestPromise\n\n              if (\n                !opts?.preload ||\n                !this.state.matches.find((d) => d.id === match.id)\n              ) {\n                this.setRouteMatch(match.id, (s) => ({\n                  ...s,\n                  error: undefined,\n                  status: 'success',\n                  updatedAt: Date.now(),\n                  loader,\n                }))\n              }\n            } catch (err) {\n              if ((latestPromise = checkLatest())) return await latestPromise\n\n              if (isRedirect(err)) {\n                if (!opts?.preload) {\n                  this.navigate(err as any)\n                }\n                return\n              }\n\n              const errorHandler =\n                route.options.onLoadError ?? route.options.onError\n\n              let caughtError = err\n\n              try {\n                errorHandler?.(err)\n              } catch (errorHandlerErr) {\n                caughtError = errorHandlerErr\n                if (isRedirect(errorHandlerErr)) {\n                  if (!opts?.preload) {\n                    this.navigate(errorHandlerErr as any)\n                  }\n                  return\n                }\n              }\n\n              this.setRouteMatch(match.id, (s) => ({\n                ...s,\n                error: caughtError,\n                status: 'error',\n                updatedAt: Date.now(),\n              }))\n            } finally {\n              if ((latestPromise = checkLatest())) return await latestPromise\n              if (opts?.preload) {\n                this.__store.setState((s) => {\n                  const preloadMatches = { ...s.preloadMatches }\n                  delete preloadMatches[match.id]\n                  return {\n                    ...s,\n                    preloadMatches,\n                  }\n                })\n              }\n            }\n          })\n\n          this.setRouteMatch(match.id, (s) => ({\n            ...s,\n            loadPromise,\n            fetchedAt,\n          }))\n\n          await loadPromise\n        }),\n      )\n    })\n\n    await Promise.all(matchPromises)\n  }\n\n  reload = () => {\n    this.navigate({\n      fromCurrent: true,\n      replace: true,\n      search: true,\n    } as any)\n  }\n\n  resolvePath = (from: string, path: string) => {\n    return resolvePath(this.basepath!, from, cleanPath(path))\n  }\n\n  navigate = async <TFrom extends string = '/', TTo extends string = ''>({\n    from,\n    to = '' as any,\n    search,\n    hash,\n    replace,\n    params,\n  }: NavigateOptions<TRoutesInfo, TFrom, TTo>) => {\n    // If this link simply reloads the current route,\n    // make sure it has a new key so it will trigger a data refresh\n\n    // If this `to` is a valid external URL, return\n    // null for LinkUtils\n    const toString = String(to)\n    const fromString = typeof from === 'undefined' ? from : String(from)\n    let isExternal\n\n    try {\n      new URL(`${toString}`)\n      isExternal = true\n    } catch (e) {}\n\n    invariant(\n      !isExternal,\n      'Attempting to navigate to external url with this.navigate!',\n    )\n\n    return this.#commitLocation({\n      from: fromString,\n      to: toString,\n      search,\n      hash,\n      replace,\n      params,\n    })\n  }\n\n  matchRoute = <\n    TFrom extends string = '/',\n    TTo extends string = '',\n    TResolved extends string = ResolveRelativePath<TFrom, NoInfer<TTo>>,\n  >(\n    location: ToOptions<TRoutesInfo, TFrom, TTo>,\n    opts?: MatchRouteOptions,\n  ): false | TRoutesInfo['routesById'][TResolved]['__types']['allParams'] => {\n    location = {\n      ...location,\n      to: location.to\n        ? this.resolvePath(location.from ?? '', location.to)\n        : undefined,\n    } as any\n\n    const next = this.buildNext(location)\n    if (opts?.pending && this.state.status !== 'pending') {\n      return false\n    }\n\n    const baseLocation = opts?.pending\n      ? this.state.location\n      : this.state.resolvedLocation\n\n    if (!baseLocation) {\n      return false\n    }\n\n    const match = matchPathname(this.basepath, baseLocation.pathname, {\n      ...opts,\n      to: next.pathname,\n    }) as any\n\n    if (!match) {\n      return false\n    }\n\n    if (opts?.includeSearch ?? true) {\n      return partialDeepEqual(baseLocation.search, next.search) ? match : false\n    }\n\n    return match\n  }\n\n  buildLink = <TFrom extends string = '/', TTo extends string = ''>({\n    from,\n    to = '.' as any,\n    search,\n    params,\n    hash,\n    target,\n    replace,\n    activeOptions,\n    preload,\n    preloadDelay: userPreloadDelay,\n    disabled,\n  }: LinkOptions<TRoutesInfo, TFrom, TTo>): LinkInfo => {\n    // If this link simply reloads the current route,\n    // make sure it has a new key so it will trigger a data refresh\n\n    // If this `to` is a valid external URL, return\n    // null for LinkUtils\n\n    try {\n      new URL(`${to}`)\n      return {\n        type: 'external',\n        href: to,\n      }\n    } catch (e) {}\n\n    const nextOpts = {\n      from,\n      to,\n      search,\n      params,\n      hash,\n      replace,\n    }\n\n    const next = this.buildNext(nextOpts)\n\n    preload = preload ?? this.options.defaultPreload\n    const preloadDelay =\n      userPreloadDelay ?? this.options.defaultPreloadDelay ?? 0\n\n    // Compare path/hash for matches\n    const currentPathSplit = this.state.location.pathname.split('/')\n    const nextPathSplit = next.pathname.split('/')\n    const pathIsFuzzyEqual = nextPathSplit.every(\n      (d, i) => d === currentPathSplit[i],\n    )\n    // Combine the matches based on user options\n    const pathTest = activeOptions?.exact\n      ? this.state.location.pathname === next.pathname\n      : pathIsFuzzyEqual\n    const hashTest = activeOptions?.includeHash\n      ? this.state.location.hash === next.hash\n      : true\n    const searchTest =\n      activeOptions?.includeSearch ?? true\n        ? partialDeepEqual(this.state.location.search, next.search)\n        : true\n\n    // The final \"active\" test\n    const isActive = pathTest && hashTest && searchTest\n\n    // The click handler\n    const handleClick = (e: MouseEvent) => {\n      if (\n        !disabled &&\n        !isCtrlEvent(e) &&\n        !e.defaultPrevented &&\n        (!target || target === '_self') &&\n        e.button === 0\n      ) {\n        e.preventDefault()\n\n        // All is well? Navigate!\n        this.#commitLocation(nextOpts as any)\n      }\n    }\n\n    // The click handler\n    const handleFocus = (e: MouseEvent) => {\n      if (preload) {\n        this.preloadRoute(nextOpts).catch((err) => {\n          console.warn(err)\n          console.warn('Error preloading route! ☝️')\n        })\n      }\n    }\n\n    const handleTouchStart = (e: TouchEvent) => {\n      this.preloadRoute(nextOpts).catch((err) => {\n        console.warn(err)\n        console.warn('Error preloading route! ☝️')\n      })\n    }\n\n    const handleEnter = (e: MouseEvent) => {\n      const target = (e.target || {}) as LinkCurrentTargetElement\n\n      if (preload) {\n        if (target.preloadTimeout) {\n          return\n        }\n\n        target.preloadTimeout = setTimeout(() => {\n          target.preloadTimeout = null\n          this.preloadRoute(nextOpts).catch((err) => {\n            console.warn(err)\n            console.warn('Error preloading route! ☝️')\n          })\n        }, preloadDelay)\n      }\n    }\n\n    const handleLeave = (e: MouseEvent) => {\n      const target = (e.target || {}) as LinkCurrentTargetElement\n\n      if (target.preloadTimeout) {\n        clearTimeout(target.preloadTimeout)\n        target.preloadTimeout = null\n      }\n    }\n\n    return {\n      type: 'internal',\n      next,\n      handleFocus,\n      handleClick,\n      handleEnter,\n      handleLeave,\n      handleTouchStart,\n      isActive,\n      disabled,\n    }\n  }\n\n  dehydrate = (): DehydratedRouter => {\n    return {\n      state: pick(this.state, ['location', 'status', 'lastUpdated']),\n    }\n  }\n\n  hydrate = async (__do_not_use_server_ctx?: HydrationCtx) => {\n    let _ctx = __do_not_use_server_ctx\n    // Client hydrates from window\n    if (typeof document !== 'undefined') {\n      _ctx = window.__TSR_DEHYDRATED__\n    }\n\n    invariant(\n      _ctx,\n      'Expected to find a __TSR_DEHYDRATED__ property on window... but we did not. Did you forget to render <DehydrateRouter /> in your app?',\n    )\n\n    const ctx = _ctx\n    this.dehydratedData = ctx.payload as any\n    this.options.hydrate?.(ctx.payload as any)\n\n    this.__store.setState((s) => {\n      return {\n        ...s,\n        ...ctx.router.state,\n        matches: s.matches,\n        resolvedLocation: ctx.router.state.location,\n      }\n    })\n\n    await this.load()\n\n    return\n  }\n\n  injectedHtml: (string | (() => Promise<string> | string))[] = []\n\n  injectHtml = async (html: string | (() => Promise<string> | string)) => {\n    this.injectedHtml.push(html)\n  }\n\n  dehydrateData = <T>(key: any, getData: T | (() => Promise<T> | T)) => {\n    if (typeof document === 'undefined') {\n      const strKey = typeof key === 'string' ? key : JSON.stringify(key)\n\n      this.injectHtml(async () => {\n        const id = `__TSR_DEHYDRATED__${strKey}`\n        const data =\n          typeof getData === 'function' ? await (getData as any)() : getData\n        return `<script id='${id}' suppressHydrationWarning>window[\"__TSR_DEHYDRATED__${escapeJSON(\n          strKey,\n        )}\"] = ${JSON.stringify(data)}\n        ;(() => {\n          var el = document.getElementById('${id}')\n          el.parentElement.removeChild(el)\n        })()\n        </script>`\n      })\n\n      return () => this.hydrateData<T>(key)\n    }\n\n    return () => undefined\n  }\n\n  hydrateData = <T = unknown>(key: any) => {\n    if (typeof document !== 'undefined') {\n      const strKey = typeof key === 'string' ? key : JSON.stringify(key)\n\n      return window[`__TSR_DEHYDRATED__${strKey}` as any] as T\n    }\n\n    return undefined\n  }\n\n  // resolveMatchPromise = (matchId: string, key: string, value: any) => {\n  //   this.state.matches\n  //     .find((d) => d.id === matchId)\n  //     ?.__promisesByKey[key]?.resolve(value)\n  // }\n\n  #buildRouteTree = (routeTree: TRouteTree) => {\n    this.routeTree = routeTree as any\n    this.routesById = {} as any\n    this.routesByPath = {} as any\n    this.flatRoutes = [] as any\n\n    const recurseRoutes = (routes: AnyRoute[]) => {\n      routes.forEach((route, i) => {\n        route.init({ originalIndex: i, router: this })\n\n        const existingRoute = (this.routesById as any)[route.id]\n\n        invariant(\n          !existingRoute,\n          `Duplicate routes found with id: ${String(route.id)}`,\n        )\n        ;(this.routesById as any)[route.id] = route\n\n        if (!route.isRoot && route.path) {\n          const trimmedFullPath = trimPathRight(route.fullPath)\n          if (\n            !this.routesByPath[trimmedFullPath] ||\n            route.fullPath.endsWith('/')\n          ) {\n            ;(this.routesByPath as any)[trimmedFullPath] = route\n          }\n        }\n\n        const children = route.children as Route[]\n\n        if (children?.length) {\n          recurseRoutes(children)\n        }\n      })\n    }\n\n    recurseRoutes([routeTree])\n\n    this.flatRoutes = (Object.values(this.routesByPath) as AnyRoute[])\n      .map((d, i) => {\n        const trimmed = trimPath(d.fullPath)\n        const parsed = parsePathname(trimmed)\n\n        while (parsed.length > 1 && parsed[0]?.value === '/') {\n          parsed.shift()\n        }\n\n        const score = parsed.map((d) => {\n          if (d.type === 'param') {\n            return 0.5\n          }\n\n          if (d.type === 'wildcard') {\n            return 0.25\n          }\n\n          return 1\n        })\n\n        return { child: d, trimmed, parsed, index: i, score }\n      })\n      .sort((a, b) => {\n        let isIndex = a.trimmed === '/' ? 1 : b.trimmed === '/' ? -1 : 0\n\n        if (isIndex !== 0) return isIndex\n\n        const length = Math.min(a.score.length, b.score.length)\n\n        // Sort by length of score\n        if (a.score.length !== b.score.length) {\n          return b.score.length - a.score.length\n        }\n\n        // Sort by min available score\n        for (let i = 0; i < length; i++) {\n          if (a.score[i] !== b.score[i]) {\n            return b.score[i]! - a.score[i]!\n          }\n        }\n\n        // Sort by min available parsed value\n        for (let i = 0; i < length; i++) {\n          if (a.parsed[i]!.value !== b.parsed[i]!.value) {\n            return a.parsed[i]!.value! > b.parsed[i]!.value! ? 1 : -1\n          }\n        }\n\n        // Sort by length of trimmed full path\n        if (a.trimmed !== b.trimmed) {\n          return a.trimmed > b.trimmed ? 1 : -1\n        }\n\n        // Sort by original index\n        return a.index - b.index\n      })\n      .map((d, i) => {\n        d.child.rank = i\n        return d.child\n      }) as any\n  }\n\n  #parseLocation = (previousLocation?: ParsedLocation): ParsedLocation => {\n    let { pathname, search, hash, state } = this.history.location\n\n    const parsedSearch = this.options.parseSearch(search)\n\n    return {\n      pathname: pathname,\n      searchStr: search,\n      search: replaceEqualDeep(previousLocation?.search, parsedSearch),\n      hash: hash.split('#').reverse()[0] ?? '',\n      href: `${pathname}${search}${hash}`,\n      state: state as LocationState,\n      key: state?.key || '__init__',\n    }\n  }\n\n  #buildLocation = (dest: BuildNextOptions = {}): ParsedLocation => {\n    dest.fromCurrent = dest.fromCurrent ?? dest.to === ''\n\n    const fromPathname = dest.fromCurrent\n      ? this.state.location.pathname\n      : dest.from ?? this.state.location.pathname\n\n    let pathname = resolvePath(\n      this.basepath ?? '/',\n      fromPathname,\n      `${dest.to ?? ''}`,\n    )\n\n    const fromMatches = this.matchRoutes(\n      this.state.location.pathname,\n      this.state.location.search,\n    )\n\n    const prevParams = { ...last(fromMatches)?.params }\n\n    let nextParams =\n      (dest.params ?? true) === true\n        ? prevParams\n        : functionalUpdate(dest.params!, prevParams)\n\n    if (nextParams) {\n      dest.__matches\n        ?.map((d) => this.getRoute(d.routeId).options.stringifyParams)\n        .filter(Boolean)\n        .forEach((fn) => {\n          nextParams = { ...nextParams!, ...fn!(nextParams!) }\n        })\n    }\n\n    pathname = interpolatePath(pathname, nextParams ?? {})\n\n    const preSearchFilters =\n      dest.__matches\n        ?.map(\n          (match) =>\n            this.getRoute(match.routeId).options.preSearchFilters ?? [],\n        )\n        .flat()\n        .filter(Boolean) ?? []\n\n    const postSearchFilters =\n      dest.__matches\n        ?.map(\n          (match) =>\n            this.getRoute(match.routeId).options.postSearchFilters ?? [],\n        )\n        .flat()\n        .filter(Boolean) ?? []\n\n    // Pre filters first\n    const preFilteredSearch = preSearchFilters?.length\n      ? preSearchFilters?.reduce(\n          (prev, next) => next(prev),\n          this.state.location.search,\n        )\n      : this.state.location.search\n\n    // Then the link/navigate function\n    const destSearch =\n      dest.search === true\n        ? preFilteredSearch // Preserve resolvedFrom true\n        : dest.search\n        ? functionalUpdate(dest.search, preFilteredSearch) ?? {} // Updater\n        : preSearchFilters?.length\n        ? preFilteredSearch // Preserve resolvedFrom filters\n        : {}\n\n    // Then post filters\n    const postFilteredSearch = postSearchFilters?.length\n      ? postSearchFilters.reduce((prev, next) => next(prev), destSearch)\n      : destSearch\n\n    const search = replaceEqualDeep(\n      this.state.location.search,\n      postFilteredSearch,\n    )\n\n    const searchStr = this.options.stringifySearch(search)\n\n    const hash =\n      dest.hash === true\n        ? this.state.location.hash\n        : functionalUpdate(dest.hash!, this.state.location.hash)\n\n    const hashStr = hash ? `#${hash}` : ''\n\n    const nextState =\n      dest.state === true\n        ? this.state.location.state\n        : functionalUpdate(dest.state, this.state.location.state)!\n\n    return {\n      pathname,\n      search,\n      searchStr,\n      state: nextState,\n      hash,\n      href: this.history.createHref(`${pathname}${searchStr}${hashStr}`),\n      key: dest.key,\n    }\n  }\n\n  #commitLocation = async (\n    location: BuildNextOptions & { replace?: boolean },\n  ) => {\n    const next = this.buildNext(location)\n    const id = '' + Date.now() + Math.random()\n\n    if (this.navigateTimeout) clearTimeout(this.navigateTimeout)\n\n    let nextAction: 'push' | 'replace' = 'replace'\n\n    if (!location.replace) {\n      nextAction = 'push'\n    }\n\n    const isSameUrl = this.state.location.href === next.href\n\n    if (isSameUrl && !next.key) {\n      nextAction = 'replace'\n    }\n\n    const href = `${next.pathname}${next.searchStr}${\n      next.hash ? `#${next.hash}` : ''\n    }`\n\n    this.history[nextAction === 'push' ? 'push' : 'replace'](href, {\n      id,\n      ...next.state,\n    })\n\n    return this.#createNavigationPromise()\n  }\n\n  #createNavigationPromise = () => {\n    const previousNavigationResolve = this.resolveNavigation\n\n    this.navigationPromise = new Promise((resolve) => {\n      this.resolveNavigation = () => {\n        resolve()\n        previousNavigationResolve()\n      }\n    })\n\n    return this.navigationPromise\n  }\n\n  getRouteMatch = (\n    id: string,\n  ): undefined | RouteMatch<TRoutesInfo, AnyRoute> => {\n    return (\n      this.state.matches.find((d) => d.id === id) ||\n      this.state.preloadMatches[id]\n    )\n  }\n\n  #setResolvedRouteMatch = (\n    id: string,\n    updater: (\n      prev: RouteMatch<TRoutesInfo, AnyRoute>,\n    ) => RouteMatch<TRoutesInfo, AnyRoute>,\n  ) => {\n    this.__store.setState((prev) => ({\n      ...prev,\n      matches: prev.matches.map((d) => {\n        if (d.id === id) {\n          return updater(d as any)\n        }\n        return d\n      }),\n    }))\n  }\n\n  #setPendingRouteMatch = (\n    id: string,\n    updater: (\n      prev: RouteMatch<TRoutesInfo, AnyRoute>,\n    ) => RouteMatch<TRoutesInfo, AnyRoute>,\n  ) => {\n    this.__store.setState((prev) => ({\n      ...prev,\n      pendingMatches: prev.pendingMatches.map((d) => {\n        if (d.id === id) {\n          return updater(d as any)\n        }\n        return d\n      }),\n    }))\n  }\n\n  #setPreloadRouteMatch = (\n    id: string,\n    updater: (\n      prev: RouteMatch<TRoutesInfo, AnyRoute>,\n    ) => RouteMatch<TRoutesInfo, AnyRoute>,\n  ) => {\n    invariant(this.state.preloadMatches[id], 'Match not found')\n\n    this.__store.setState((prev) => ({\n      ...prev,\n      preloadMatches: {\n        ...prev.preloadMatches,\n        [id]: updater(prev.preloadMatches[id] as any),\n      },\n    }))\n  }\n\n  setRouteMatch = (\n    id: string,\n    updater: (\n      prev: RouteMatch<TRoutesInfo, AnyRoute>,\n    ) => RouteMatch<TRoutesInfo, AnyRoute>,\n  ) => {\n    if (this.state.matches.find((d) => d.id === id)) {\n      return this.#setResolvedRouteMatch(id, updater)\n    }\n\n    if (this.state.pendingMatches.find((d) => d.id === id)) {\n      return this.#setPendingRouteMatch(id, updater)\n    }\n\n    if (this.state.preloadMatches[id]) {\n      return this.#setPreloadRouteMatch(id, updater)\n    }\n  }\n}\n\n// Detect if we're in the DOM\nconst isServer = typeof window === 'undefined' || !window.document.createElement\n\nfunction getInitialRouterState(): RouterState<any, any> {\n  return {\n    status: 'idle',\n    resolvedLocation: null!,\n    location: null!,\n    matches: [],\n    pendingMatches: [],\n    preloadMatches: {},\n    lastUpdated: Date.now(),\n  }\n}\n\nfunction isCtrlEvent(e: MouseEvent) {\n  return !!(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey)\n}\n\nexport type AnyRedirect = Redirect<any, any, any>\n\nexport type Redirect<\n  TRoutesInfo extends AnyRoutesInfo = RegisteredRoutesInfo,\n  TFrom extends TRoutesInfo['routePaths'] = '/',\n  TTo extends string = '',\n> = NavigateOptions<TRoutesInfo, TFrom, TTo> & {\n  code?: number\n}\n\nexport function redirect<\n  TRoutesInfo extends AnyRoutesInfo = RegisteredRoutesInfo,\n  TFrom extends TRoutesInfo['routePaths'] = '/',\n  TTo extends string = '',\n>(opts: Redirect<TRoutesInfo, TFrom, TTo>): Redirect<TRoutesInfo, TFrom, TTo> {\n  ;(opts as any).isRedirect = true\n  return opts\n}\n\nexport function isRedirect(obj: any): obj is AnyRedirect {\n  return !!obj?.isRedirect\n}\n\nexport class SearchParamError extends Error {}\nexport class PathParamError extends Error {}\n\nfunction escapeJSON(jsonString: string) {\n  return jsonString\n    .replace(/\\\\/g, '\\\\\\\\') // Escape backslashes\n    .replace(/'/g, \"\\\\'\") // Escape single quotes\n    .replace(/\"/g, '\\\\\"') // Escape double quotes\n}\n","var isProduction = process.env.NODE_ENV === 'production';\nfunction warning(condition, message) {\n  if (!isProduction) {\n    if (condition) {\n      return;\n    }\n\n    var text = \"Warning: \" + message;\n\n    if (typeof console !== 'undefined') {\n      console.warn(text);\n    }\n\n    try {\n      throw Error(text);\n    } catch (x) {}\n  }\n}\n\nexport default warning;\n"],"names":["invariant","condition","message","Error","popStateEvent","beforeUnloadEvent","beforeUnloadListener","event","preventDefault","returnValue","stopBlocking","removeEventListener","capture","createHistory","opts","location","getLocation","unsub","listeners","Set","blockers","queue","tryFlush","length","shift","onUpdate","queueTask","task","push","forEach","listener","listen","cb","size","add","delete","path","state","pushState","replace","replaceState","go","index","back","forward","createHref","str","block","addEventListener","filter","b","createBrowserHistory","getHref","window","pathname","search","hash","parseLocation","history","key","createRandomKey","n","createMemoryHistory","initialEntries","entries","initialIndex","currentState","Math","min","href","hashIndex","indexOf","searchIndex","substring","slice","undefined","random","toString","last","arr","functionalUpdate","updater","previous","pick","parent","keys","reduce","obj","replaceEqualDeep","prev","_next","next","array","Array","isArray","isPlainObject","prevSize","Object","nextItems","nextSize","copy","equalItems","i","o","hasObjectPrototype","ctor","constructor","prot","prototype","hasOwnProperty","call","partialDeepEqual","a","some","every","item","joinPaths","paths","cleanPath","Boolean","join","trimPathLeft","trimPathRight","trimPath","resolvePath","basepath","base","to","RegExp","baseSegments","parsePathname","toSegments","toSegment","value","pop","map","d","segments","type","split","part","charAt","interpolatePath","params","leaveWildcards","segment","matchPathname","currentPathname","matchLocation","pathParams","matchByPath","from","routeSegments","startsWith","unshift","max","baseSegment","routeSegment","isLastBaseSegment","isLastRouteSegment","caseSensitive","toLowerCase","fuzzy","encode","pfx","k","tmp","encodeURIComponent","toValue","mix","decodeURIComponent","decode","out","concat","Store","_batching","_flushing","_nextPriority","initialState","options","this","subscribe","onSubscribe","setState","updateFn","priority","defaultPriority","_flush","flushId","batch","useStore","store","selector","useSyncExternalStoreWithSelector","shallow","objA","objB","is","keysA","useLinkProps","router","useRouter","children","target","activeProps","className","inactiveProps","activeOptions","disabled","preload","preloadDelay","style","onClick","onFocus","onMouseEnter","onMouseLeave","onTouchStart","rest","linkInfo","buildLink","handleClick","handleFocus","handleEnter","handleLeave","handleTouchStart","isActive","composeHandlers","handlers","e","persist","handler","defaultPrevented","resolvedActiveProps","resolvedInactiveProps","startTransition","React","role","Link","forwardRef","props","ref","linkProps","createElement","_extends","matchIdsContext","createContext","routerContext","useRouterState","__store","select","Matches","matchIds","matches","id","Provider","CatchBoundary","errorComponent","ErrorComponent","onCatch","Outlet","useContext","useMatch","nearestMatchId","nearestMatchRouteId","getRouteMatch","routeId","matchRouteId","find","strict","match","useLoader","loader","useSearch","useParams","useMatchRoute","useCallback","pending","matchRoute","Match","defaultPending","matchId","route","getRoute","PendingComponent","pendingComponent","defaultPendingComponent","defaultErrorComponent","ResolvedSuspenseBoundary","wrapInSuspense","isRoot","Suspense","SafeFragment","ResolvedCatchBoundary","fallback","MatchInner","status","error","comp","component","defaultComponent","Component","info","componentDidCatch","render","CatchBoundaryInner","errorState","reset","locationKey","resolvedLocation","activeErrorState","setActiveErrorState","useState","prevKeyRef","useRef","useEffect","current","padding","maxWidth","fontSize","height","border","borderRadius","color","overflow","useBlocker","unblock","retry","cancel","confirm","rootRouteId","Route","getParentRoute","init","originalIndex","allOptions","parentRoute","customId","fullPath","addChildren","context","RootRoute","super","defaultParseSearch","parseSearchWith","JSON","parse","defaultStringifySearch","stringifySearchWith","stringify","parser","searchStr","query","err","val","componentTypes","isServer","document","getInitialRouterState","pendingMatches","preloadMatches","lastUpdated","Date","now","isRedirect","SearchParamError","PathParamError","useLayoutEffect","navigate","unsubHistory","startedLoadingAt","resolveNavigation","defaultPreloadDelay","stringifySearch","parseSearch","update","buildNext","fromCurrent","commitLocation","s","assign","mount","safeLoad","parsedLocation","routeTree","buildRouteTree","buildLocation","__matches","matchRoutes","cancelMatches","cancelMatch","abortController","abort","load","catch","async","createNavigationPromise","startedAt","loadMatches","navigationPromise","prevLocation","onRouteChange","routesById","preloadRoute","navigateOpts","throwOnError","matchesById","m","locationSearch","routeParams","routeCursor","flatRoutes","matchedParams","matchedRoutes","allParams","parsedParams","parsedParamsError","parseParams","cause","interpolatedPath","getKey","existingMatch","hasLoaders","updatedAt","routeSearch","paramsError","searchError","loadPromise","Promise","resolve","routeContext","AbortController","fetchedAt","parentMatch","searchInfo","parentSearchInfo","validateSearch","contextInfo","getContext","parentContext","onError","resolvedMatches","firstBadMatchIndex","all","handleError","errorHandlerErr","setRouteMatch","onParseParamsError","onValidateSearchError","beforeLoad","onBeforeLoadError","validResolvedMatches","matchPromises","then","parentMatchPromise","checkLatest","latest","latestPromise","componentsPromise","loaderPromise","_","errorHandler","onLoadError","caughtError","reload","String","fromString","isExternal","URL","baseLocation","includeSearch","userPreloadDelay","nextOpts","defaultPreload","currentPathSplit","pathIsFuzzyEqual","pathTest","exact","hashTest","includeHash","searchTest","console","warn","metaKey","altKey","ctrlKey","shiftKey","isCtrlEvent","button","preloadTimeout","setTimeout","clearTimeout","dehydrate","hydrate","_ctx","__do_not_use_server_ctx","__TSR_DEHYDRATED__","ctx","dehydratedData","payload","injectedHtml","injectHtml","html","dehydrateData","getData","strKey","data","jsonString","hydrateData","routesByPath","recurseRoutes","routes","trimmedFullPath","endsWith","values","trimmed","parsed","score","child","sort","isIndex","rank","previousLocation","parsedSearch","reverse","dest","fromPathname","prevParams","nextParams","stringifyParams","fn","preSearchFilters","flat","postSearchFilters","preFilteredSearch","destSearch","postFilteredSearch","hashStr","navigateTimeout","nextAction","previousNavigationResolve","setResolvedRouteMatch","setPendingRouteMatch","setPreloadRouteMatch","createRootRoute","Wrap","Fragment","importer","exportName","finalComp","lazy","default","findIndex","defaultOpts"],"mappings":"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"}